# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'login': 'str',
        'name': 'str',
        'avatar_url': 'str',
        'books_count': 'int',
        'public_books_count': 'int',
        'members_count': 'int',
        'public': 'int',
        'description': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'login': 'login',
        'name': 'name',
        'avatar_url': 'avatar_url',
        'books_count': 'books_count',
        'public_books_count': 'public_books_count',
        'members_count': 'members_count',
        'public': 'public',
        'description': 'description',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, type=None, login=None, name=None, avatar_url=None, books_count=None, public_books_count=None, members_count=None, public=None, description=None, created_at=None, updated_at=None):  # noqa: E501
        """V2Group - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._login = None
        self._name = None
        self._avatar_url = None
        self._books_count = None
        self._public_books_count = None
        self._members_count = None
        self._public = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if login is not None:
            self.login = login
        if name is not None:
            self.name = name
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if books_count is not None:
            self.books_count = books_count
        if public_books_count is not None:
            self.public_books_count = public_books_count
        if members_count is not None:
            self.members_count = members_count
        if public is not None:
            self.public = public
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this V2Group.  # noqa: E501

         团队 ID  # noqa: E501

        :return: The id of this V2Group.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2Group.

         团队 ID  # noqa: E501

        :param id: The id of this V2Group.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this V2Group.  # noqa: E501

         类型 Always 'Group'  # noqa: E501

        :return: The type of this V2Group.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2Group.

         类型 Always 'Group'  # noqa: E501

        :param type: The type of this V2Group.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def login(self):
        """Gets the login of this V2Group.  # noqa: E501

         路径  # noqa: E501

        :return: The login of this V2Group.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this V2Group.

         路径  # noqa: E501

        :param login: The login of this V2Group.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def name(self):
        """Gets the name of this V2Group.  # noqa: E501

         名称  # noqa: E501

        :return: The name of this V2Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2Group.

         名称  # noqa: E501

        :param name: The name of this V2Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def avatar_url(self):
        """Gets the avatar_url of this V2Group.  # noqa: E501

         头像  # noqa: E501

        :return: The avatar_url of this V2Group.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this V2Group.

         头像  # noqa: E501

        :param avatar_url: The avatar_url of this V2Group.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def books_count(self):
        """Gets the books_count of this V2Group.  # noqa: E501

         知识库数量  # noqa: E501

        :return: The books_count of this V2Group.  # noqa: E501
        :rtype: int
        """
        return self._books_count

    @books_count.setter
    def books_count(self, books_count):
        """Sets the books_count of this V2Group.

         知识库数量  # noqa: E501

        :param books_count: The books_count of this V2Group.  # noqa: E501
        :type: int
        """

        self._books_count = books_count

    @property
    def public_books_count(self):
        """Gets the public_books_count of this V2Group.  # noqa: E501

         公开的知识库数量  # noqa: E501

        :return: The public_books_count of this V2Group.  # noqa: E501
        :rtype: int
        """
        return self._public_books_count

    @public_books_count.setter
    def public_books_count(self, public_books_count):
        """Sets the public_books_count of this V2Group.

         公开的知识库数量  # noqa: E501

        :param public_books_count: The public_books_count of this V2Group.  # noqa: E501
        :type: int
        """

        self._public_books_count = public_books_count

    @property
    def members_count(self):
        """Gets the members_count of this V2Group.  # noqa: E501

         成员人数  # noqa: E501

        :return: The members_count of this V2Group.  # noqa: E501
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this V2Group.

         成员人数  # noqa: E501

        :param members_count: The members_count of this V2Group.  # noqa: E501
        :type: int
        """

        self._members_count = members_count

    @property
    def public(self):
        """Gets the public of this V2Group.  # noqa: E501

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :return: The public of this V2Group.  # noqa: E501
        :rtype: int
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this V2Group.

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :param public: The public of this V2Group.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if public not in allowed_values:
            raise ValueError(
                "Invalid value for `public` ({0}), must be one of {1}"  # noqa: E501
                .format(public, allowed_values)
            )

        self._public = public

    @property
    def description(self):
        """Gets the description of this V2Group.  # noqa: E501

         介绍  # noqa: E501

        :return: The description of this V2Group.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2Group.

         介绍  # noqa: E501

        :param description: The description of this V2Group.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this V2Group.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2Group.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2Group.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2Group.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2Group.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2Group.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2Group.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2Group.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
