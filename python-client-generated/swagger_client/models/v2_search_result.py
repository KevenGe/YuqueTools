# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2SearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'title': 'str',
        'summary': 'str',
        'url': 'str',
        'info': 'str',
        'target': 'OneOfV2SearchResultTarget'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'title': 'title',
        'summary': 'summary',
        'url': 'url',
        'info': 'info',
        'target': 'target'
    }

    def __init__(self, id=None, type=None, title=None, summary=None, url=None, info=None, target=None):  # noqa: E501
        """V2SearchResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._title = None
        self._summary = None
        self._url = None
        self._info = None
        self._target = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if title is not None:
            self.title = title
        if summary is not None:
            self.summary = summary
        if url is not None:
            self.url = url
        if info is not None:
            self.info = info
        if target is not None:
            self.target = target

    @property
    def id(self):
        """Gets the id of this V2SearchResult.  # noqa: E501

         ID  # noqa: E501

        :return: The id of this V2SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2SearchResult.

         ID  # noqa: E501

        :param id: The id of this V2SearchResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this V2SearchResult.  # noqa: E501

         类型 (doc:文档, repo:知识库)  # noqa: E501

        :return: The type of this V2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2SearchResult.

         类型 (doc:文档, repo:知识库)  # noqa: E501

        :param type: The type of this V2SearchResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["doc", "repo"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self):
        """Gets the title of this V2SearchResult.  # noqa: E501

         标题 `<em></em>` 高亮关键词  # noqa: E501

        :return: The title of this V2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2SearchResult.

         标题 `<em></em>` 高亮关键词  # noqa: E501

        :param title: The title of this V2SearchResult.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this V2SearchResult.  # noqa: E501

         摘要 `<em></em>` 高亮关键词  # noqa: E501

        :return: The summary of this V2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this V2SearchResult.

         摘要 `<em></em>` 高亮关键词  # noqa: E501

        :param summary: The summary of this V2SearchResult.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def url(self):
        """Gets the url of this V2SearchResult.  # noqa: E501

         访问路径  # noqa: E501

        :return: The url of this V2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V2SearchResult.

         访问路径  # noqa: E501

        :param url: The url of this V2SearchResult.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def info(self):
        """Gets the info of this V2SearchResult.  # noqa: E501

         归属信息  # noqa: E501

        :return: The info of this V2SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this V2SearchResult.

         归属信息  # noqa: E501

        :param info: The info of this V2SearchResult.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def target(self):
        """Gets the target of this V2SearchResult.  # noqa: E501


        :return: The target of this V2SearchResult.  # noqa: E501
        :rtype: OneOfV2SearchResultTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this V2SearchResult.


        :param target: The target of this V2SearchResult.  # noqa: E501
        :type: OneOfV2SearchResultTarget
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2SearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2SearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
