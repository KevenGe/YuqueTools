# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2DocDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'slug': 'str',
        'title': 'str',
        'description': 'str',
        'cover': 'str',
        'user_id': 'int',
        'book_id': 'int',
        'last_editor_id': 'int',
        'format': 'str',
        'body_draft': 'str',
        'body': 'str',
        'body_sheet': 'str',
        'body_html': 'str',
        'body_lake': 'str',
        'public': 'int',
        'status': 'str',
        'likes_count': 'int',
        'read_count': 'int',
        'hits': 'int',
        'comments_count': 'int',
        'word_count': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'content_updated_at': 'datetime',
        'published_at': 'datetime',
        'first_published_at': 'datetime',
        'book': 'V2Book',
        'user': 'V2User',
        'creator': 'V2User',
        'tags': 'V2Tag',
        'latest_version_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'slug': 'slug',
        'title': 'title',
        'description': 'description',
        'cover': 'cover',
        'user_id': 'user_id',
        'book_id': 'book_id',
        'last_editor_id': 'last_editor_id',
        'format': 'format',
        'body_draft': 'body_draft',
        'body': 'body',
        'body_sheet': 'body_sheet',
        'body_html': 'body_html',
        'body_lake': 'body_lake',
        'public': 'public',
        'status': 'status',
        'likes_count': 'likes_count',
        'read_count': 'read_count',
        'hits': 'hits',
        'comments_count': 'comments_count',
        'word_count': 'word_count',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'content_updated_at': 'content_updated_at',
        'published_at': 'published_at',
        'first_published_at': 'first_published_at',
        'book': 'book',
        'user': 'user',
        'creator': 'creator',
        'tags': 'tags',
        'latest_version_id': 'latest_version_id'
    }

    def __init__(self, id=None, type=None, slug=None, title=None, description=None, cover=None, user_id=None, book_id=None, last_editor_id=None, format=None, body_draft=None, body=None, body_sheet=None, body_html=None, body_lake=None, public=None, status=None, likes_count=None, read_count=None, hits=None, comments_count=None, word_count=None, created_at=None, updated_at=None, content_updated_at=None, published_at=None, first_published_at=None, book=None, user=None, creator=None, tags=None, latest_version_id=None):  # noqa: E501
        """V2DocDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._slug = None
        self._title = None
        self._description = None
        self._cover = None
        self._user_id = None
        self._book_id = None
        self._last_editor_id = None
        self._format = None
        self._body_draft = None
        self._body = None
        self._body_sheet = None
        self._body_html = None
        self._body_lake = None
        self._public = None
        self._status = None
        self._likes_count = None
        self._read_count = None
        self._hits = None
        self._comments_count = None
        self._word_count = None
        self._created_at = None
        self._updated_at = None
        self._content_updated_at = None
        self._published_at = None
        self._first_published_at = None
        self._book = None
        self._user = None
        self._creator = None
        self._tags = None
        self._latest_version_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if cover is not None:
            self.cover = cover
        if user_id is not None:
            self.user_id = user_id
        if book_id is not None:
            self.book_id = book_id
        if last_editor_id is not None:
            self.last_editor_id = last_editor_id
        if format is not None:
            self.format = format
        if body_draft is not None:
            self.body_draft = body_draft
        if body is not None:
            self.body = body
        if body_sheet is not None:
            self.body_sheet = body_sheet
        if body_html is not None:
            self.body_html = body_html
        if body_lake is not None:
            self.body_lake = body_lake
        if public is not None:
            self.public = public
        if status is not None:
            self.status = status
        if likes_count is not None:
            self.likes_count = likes_count
        if read_count is not None:
            self.read_count = read_count
        if hits is not None:
            self.hits = hits
        if comments_count is not None:
            self.comments_count = comments_count
        if word_count is not None:
            self.word_count = word_count
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if content_updated_at is not None:
            self.content_updated_at = content_updated_at
        if published_at is not None:
            self.published_at = published_at
        if first_published_at is not None:
            self.first_published_at = first_published_at
        if book is not None:
            self.book = book
        if user is not None:
            self.user = user
        if creator is not None:
            self.creator = creator
        if tags is not None:
            self.tags = tags
        if latest_version_id is not None:
            self.latest_version_id = latest_version_id

    @property
    def id(self):
        """Gets the id of this V2DocDetail.  # noqa: E501

         文档 ID  # noqa: E501

        :return: The id of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2DocDetail.

         文档 ID  # noqa: E501

        :param id: The id of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this V2DocDetail.  # noqa: E501

         文档类型 (Doc:普通文档, Sheet:表格, Thread:话题, Board:图集, Table:数据表)  # noqa: E501

        :return: The type of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2DocDetail.

         文档类型 (Doc:普通文档, Sheet:表格, Thread:话题, Board:图集, Table:数据表)  # noqa: E501

        :param type: The type of this V2DocDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["Doc", "Sheet", "Thread", "Board", "Table"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def slug(self):
        """Gets the slug of this V2DocDetail.  # noqa: E501

         路径  # noqa: E501

        :return: The slug of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2DocDetail.

         路径  # noqa: E501

        :param slug: The slug of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this V2DocDetail.  # noqa: E501

         标题  # noqa: E501

        :return: The title of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2DocDetail.

         标题  # noqa: E501

        :param title: The title of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this V2DocDetail.  # noqa: E501

         摘要  # noqa: E501

        :return: The description of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2DocDetail.

         摘要  # noqa: E501

        :param description: The description of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cover(self):
        """Gets the cover of this V2DocDetail.  # noqa: E501

         封面  # noqa: E501

        :return: The cover of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this V2DocDetail.

         封面  # noqa: E501

        :param cover: The cover of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._cover = cover

    @property
    def user_id(self):
        """Gets the user_id of this V2DocDetail.  # noqa: E501

         归属用户/团队 ID  # noqa: E501

        :return: The user_id of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2DocDetail.

         归属用户/团队 ID  # noqa: E501

        :param user_id: The user_id of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def book_id(self):
        """Gets the book_id of this V2DocDetail.  # noqa: E501

         归属知识库 ID  # noqa: E501

        :return: The book_id of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V2DocDetail.

         归属知识库 ID  # noqa: E501

        :param book_id: The book_id of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._book_id = book_id

    @property
    def last_editor_id(self):
        """Gets the last_editor_id of this V2DocDetail.  # noqa: E501

         最后编辑者 ID  # noqa: E501

        :return: The last_editor_id of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._last_editor_id

    @last_editor_id.setter
    def last_editor_id(self, last_editor_id):
        """Sets the last_editor_id of this V2DocDetail.

         最后编辑者 ID  # noqa: E501

        :param last_editor_id: The last_editor_id of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._last_editor_id = last_editor_id

    @property
    def format(self):
        """Gets the format of this V2DocDetail.  # noqa: E501

         内容格式 (markdown:Markdown 格式, lake:语雀 Lake 格式, html:HTML 标准格式, lakesheet:语雀表格)  # noqa: E501

        :return: The format of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this V2DocDetail.

         内容格式 (markdown:Markdown 格式, lake:语雀 Lake 格式, html:HTML 标准格式, lakesheet:语雀表格)  # noqa: E501

        :param format: The format of this V2DocDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["markdown", "lake", "html", "lakesheet"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def body_draft(self):
        """Gets the body_draft of this V2DocDetail.  # noqa: E501

         正文草稿内容  # noqa: E501

        :return: The body_draft of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_draft

    @body_draft.setter
    def body_draft(self, body_draft):
        """Sets the body_draft of this V2DocDetail.

         正文草稿内容  # noqa: E501

        :param body_draft: The body_draft of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._body_draft = body_draft

    @property
    def body(self):
        """Gets the body of this V2DocDetail.  # noqa: E501

         正文原始内容  # noqa: E501

        :return: The body of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this V2DocDetail.

         正文原始内容  # noqa: E501

        :param body: The body of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_sheet(self):
        """Gets the body_sheet of this V2DocDetail.  # noqa: E501

         表格正文内容   语雀表格 (lakesheet) 正文格式示例, JSON 反序列化后的结构: (注意: 所有项的值均为字符串, 公式项为计算后的值, 日期格式: yyyy-mm-dd HH:MM:SS)   ```json {   \"version\": \"1.0\",   \"data\": [     {       \"name\": \"Sheet1\",       \"index\": 0,       \"rowCount\": 100,       \"colCount\": 4,       \"table\": [         [\"参数名\", \"类型\", \"必填\", \"默认值\"],         [\"name\", \"string\", \"1\", \"\"],         [\"flag\", \"boolean\", \"0\", \"false\"]       ]     },     {       \"name\": \"Sheet2\",       \"index\": 0,       \"rowCount\": 100,       \"colCount\": 8,       \"table\": []     }   ] } ```    # noqa: E501

        :return: The body_sheet of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_sheet

    @body_sheet.setter
    def body_sheet(self, body_sheet):
        """Sets the body_sheet of this V2DocDetail.

         表格正文内容   语雀表格 (lakesheet) 正文格式示例, JSON 反序列化后的结构: (注意: 所有项的值均为字符串, 公式项为计算后的值, 日期格式: yyyy-mm-dd HH:MM:SS)   ```json {   \"version\": \"1.0\",   \"data\": [     {       \"name\": \"Sheet1\",       \"index\": 0,       \"rowCount\": 100,       \"colCount\": 4,       \"table\": [         [\"参数名\", \"类型\", \"必填\", \"默认值\"],         [\"name\", \"string\", \"1\", \"\"],         [\"flag\", \"boolean\", \"0\", \"false\"]       ]     },     {       \"name\": \"Sheet2\",       \"index\": 0,       \"rowCount\": 100,       \"colCount\": 8,       \"table\": []     }   ] } ```    # noqa: E501

        :param body_sheet: The body_sheet of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._body_sheet = body_sheet

    @property
    def body_html(self):
        """Gets the body_html of this V2DocDetail.  # noqa: E501

         正文 HTML 标准格式内容  # noqa: E501

        :return: The body_html of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this V2DocDetail.

         正文 HTML 标准格式内容  # noqa: E501

        :param body_html: The body_html of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._body_html = body_html

    @property
    def body_lake(self):
        """Gets the body_lake of this V2DocDetail.  # noqa: E501

         正文语雀 Lake 格式内容  # noqa: E501

        :return: The body_lake of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_lake

    @body_lake.setter
    def body_lake(self, body_lake):
        """Sets the body_lake of this V2DocDetail.

         正文语雀 Lake 格式内容  # noqa: E501

        :param body_lake: The body_lake of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._body_lake = body_lake

    @property
    def public(self):
        """Gets the public of this V2DocDetail.  # noqa: E501

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :return: The public of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this V2DocDetail.

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :param public: The public of this V2DocDetail.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if public not in allowed_values:
            raise ValueError(
                "Invalid value for `public` ({0}), must be one of {1}"  # noqa: E501
                .format(public, allowed_values)
            )

        self._public = public

    @property
    def status(self):
        """Gets the status of this V2DocDetail.  # noqa: E501

         状态 (0:草稿, 1:发布)  # noqa: E501

        :return: The status of this V2DocDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this V2DocDetail.

         状态 (0:草稿, 1:发布)  # noqa: E501

        :param status: The status of this V2DocDetail.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def likes_count(self):
        """Gets the likes_count of this V2DocDetail.  # noqa: E501

         点赞数  # noqa: E501

        :return: The likes_count of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._likes_count

    @likes_count.setter
    def likes_count(self, likes_count):
        """Sets the likes_count of this V2DocDetail.

         点赞数  # noqa: E501

        :param likes_count: The likes_count of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._likes_count = likes_count

    @property
    def read_count(self):
        """Gets the read_count of this V2DocDetail.  # noqa: E501

         阅读数    # noqa: E501

        :return: The read_count of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._read_count

    @read_count.setter
    def read_count(self, read_count):
        """Sets the read_count of this V2DocDetail.

         阅读数    # noqa: E501

        :param read_count: The read_count of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._read_count = read_count

    @property
    def hits(self):
        """Gets the hits of this V2DocDetail.  # noqa: E501

         阅读数    # noqa: E501

        :return: The hits of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this V2DocDetail.

         阅读数    # noqa: E501

        :param hits: The hits of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._hits = hits

    @property
    def comments_count(self):
        """Gets the comments_count of this V2DocDetail.  # noqa: E501

         评论数  # noqa: E501

        :return: The comments_count of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count):
        """Sets the comments_count of this V2DocDetail.

         评论数  # noqa: E501

        :param comments_count: The comments_count of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._comments_count = comments_count

    @property
    def word_count(self):
        """Gets the word_count of this V2DocDetail.  # noqa: E501

         内容字数  # noqa: E501

        :return: The word_count of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this V2DocDetail.

         内容字数  # noqa: E501

        :param word_count: The word_count of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._word_count = word_count

    @property
    def created_at(self):
        """Gets the created_at of this V2DocDetail.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2DocDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2DocDetail.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2DocDetail.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2DocDetail.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2DocDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2DocDetail.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2DocDetail.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def content_updated_at(self):
        """Gets the content_updated_at of this V2DocDetail.  # noqa: E501

         内容更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The content_updated_at of this V2DocDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._content_updated_at

    @content_updated_at.setter
    def content_updated_at(self, content_updated_at):
        """Sets the content_updated_at of this V2DocDetail.

         内容更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param content_updated_at: The content_updated_at of this V2DocDetail.  # noqa: E501
        :type: datetime
        """

        self._content_updated_at = content_updated_at

    @property
    def published_at(self):
        """Gets the published_at of this V2DocDetail.  # noqa: E501

         发布时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The published_at of this V2DocDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this V2DocDetail.

         发布时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param published_at: The published_at of this V2DocDetail.  # noqa: E501
        :type: datetime
        """

        self._published_at = published_at

    @property
    def first_published_at(self):
        """Gets the first_published_at of this V2DocDetail.  # noqa: E501

         首次发布时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The first_published_at of this V2DocDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._first_published_at

    @first_published_at.setter
    def first_published_at(self, first_published_at):
        """Sets the first_published_at of this V2DocDetail.

         首次发布时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param first_published_at: The first_published_at of this V2DocDetail.  # noqa: E501
        :type: datetime
        """

        self._first_published_at = first_published_at

    @property
    def book(self):
        """Gets the book of this V2DocDetail.  # noqa: E501


        :return: The book of this V2DocDetail.  # noqa: E501
        :rtype: V2Book
        """
        return self._book

    @book.setter
    def book(self, book):
        """Sets the book of this V2DocDetail.


        :param book: The book of this V2DocDetail.  # noqa: E501
        :type: V2Book
        """

        self._book = book

    @property
    def user(self):
        """Gets the user of this V2DocDetail.  # noqa: E501


        :return: The user of this V2DocDetail.  # noqa: E501
        :rtype: V2User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2DocDetail.


        :param user: The user of this V2DocDetail.  # noqa: E501
        :type: V2User
        """

        self._user = user

    @property
    def creator(self):
        """Gets the creator of this V2DocDetail.  # noqa: E501


        :return: The creator of this V2DocDetail.  # noqa: E501
        :rtype: V2User
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this V2DocDetail.


        :param creator: The creator of this V2DocDetail.  # noqa: E501
        :type: V2User
        """

        self._creator = creator

    @property
    def tags(self):
        """Gets the tags of this V2DocDetail.  # noqa: E501


        :return: The tags of this V2DocDetail.  # noqa: E501
        :rtype: V2Tag
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V2DocDetail.


        :param tags: The tags of this V2DocDetail.  # noqa: E501
        :type: V2Tag
        """

        self._tags = tags

    @property
    def latest_version_id(self):
        """Gets the latest_version_id of this V2DocDetail.  # noqa: E501

         最新已发版本 ID    # noqa: E501

        :return: The latest_version_id of this V2DocDetail.  # noqa: E501
        :rtype: int
        """
        return self._latest_version_id

    @latest_version_id.setter
    def latest_version_id(self, latest_version_id):
        """Sets the latest_version_id of this V2DocDetail.

         最新已发版本 ID    # noqa: E501

        :param latest_version_id: The latest_version_id of this V2DocDetail.  # noqa: E501
        :type: int
        """

        self._latest_version_id = latest_version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2DocDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2DocDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
