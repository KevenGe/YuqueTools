# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2BookDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'slug': 'str',
        'name': 'str',
        'user_id': 'int',
        'description': 'str',
        'toc_yml': 'str',
        'creator_id': 'int',
        'public': 'int',
        'items_count': 'int',
        'likes_count': 'int',
        'watches_count': 'int',
        'content_updated_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'user': 'V2User',
        'namespace': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'slug': 'slug',
        'name': 'name',
        'user_id': 'user_id',
        'description': 'description',
        'toc_yml': 'toc_yml',
        'creator_id': 'creator_id',
        'public': 'public',
        'items_count': 'items_count',
        'likes_count': 'likes_count',
        'watches_count': 'watches_count',
        'content_updated_at': 'content_updated_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'user': 'user',
        'namespace': 'namespace'
    }

    def __init__(self, id=None, type=None, slug=None, name=None, user_id=None, description=None, toc_yml=None, creator_id=None, public=None, items_count=None, likes_count=None, watches_count=None, content_updated_at=None, created_at=None, updated_at=None, user=None, namespace=None):  # noqa: E501
        """V2BookDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._slug = None
        self._name = None
        self._user_id = None
        self._description = None
        self._toc_yml = None
        self._creator_id = None
        self._public = None
        self._items_count = None
        self._likes_count = None
        self._watches_count = None
        self._content_updated_at = None
        self._created_at = None
        self._updated_at = None
        self._user = None
        self._namespace = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if slug is not None:
            self.slug = slug
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if description is not None:
            self.description = description
        if toc_yml is not None:
            self.toc_yml = toc_yml
        if creator_id is not None:
            self.creator_id = creator_id
        if public is not None:
            self.public = public
        if items_count is not None:
            self.items_count = items_count
        if likes_count is not None:
            self.likes_count = likes_count
        if watches_count is not None:
            self.watches_count = watches_count
        if content_updated_at is not None:
            self.content_updated_at = content_updated_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user
        if namespace is not None:
            self.namespace = namespace

    @property
    def id(self):
        """Gets the id of this V2BookDetail.  # noqa: E501

         知识库 ID  # noqa: E501

        :return: The id of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2BookDetail.

         知识库 ID  # noqa: E501

        :param id: The id of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this V2BookDetail.  # noqa: E501

         类型 (Book:文档, Design:图集, Sheet:表格, Resource:资源)  # noqa: E501

        :return: The type of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2BookDetail.

         类型 (Book:文档, Design:图集, Sheet:表格, Resource:资源)  # noqa: E501

        :param type: The type of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def slug(self):
        """Gets the slug of this V2BookDetail.  # noqa: E501

         路径  # noqa: E501

        :return: The slug of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2BookDetail.

         路径  # noqa: E501

        :param slug: The slug of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this V2BookDetail.  # noqa: E501

         名称  # noqa: E501

        :return: The name of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2BookDetail.

         名称  # noqa: E501

        :param name: The name of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this V2BookDetail.  # noqa: E501

         归属用户/团队 ID  # noqa: E501

        :return: The user_id of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2BookDetail.

         归属用户/团队 ID  # noqa: E501

        :param user_id: The user_id of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def description(self):
        """Gets the description of this V2BookDetail.  # noqa: E501

         简介  # noqa: E501

        :return: The description of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2BookDetail.

         简介  # noqa: E501

        :param description: The description of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def toc_yml(self):
        """Gets the toc_yml of this V2BookDetail.  # noqa: E501

         目录  # noqa: E501

        :return: The toc_yml of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._toc_yml

    @toc_yml.setter
    def toc_yml(self, toc_yml):
        """Sets the toc_yml of this V2BookDetail.

         目录  # noqa: E501

        :param toc_yml: The toc_yml of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._toc_yml = toc_yml

    @property
    def creator_id(self):
        """Gets the creator_id of this V2BookDetail.  # noqa: E501

         创建者 ID  # noqa: E501

        :return: The creator_id of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this V2BookDetail.

         创建者 ID  # noqa: E501

        :param creator_id: The creator_id of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def public(self):
        """Gets the public of this V2BookDetail.  # noqa: E501

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :return: The public of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this V2BookDetail.

         公开性 (0:私密, 1:公开, 2:企业内公开)  # noqa: E501

        :param public: The public of this V2BookDetail.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if public not in allowed_values:
            raise ValueError(
                "Invalid value for `public` ({0}), must be one of {1}"  # noqa: E501
                .format(public, allowed_values)
            )

        self._public = public

    @property
    def items_count(self):
        """Gets the items_count of this V2BookDetail.  # noqa: E501

         文档数量  # noqa: E501

        :return: The items_count of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this V2BookDetail.

         文档数量  # noqa: E501

        :param items_count: The items_count of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._items_count = items_count

    @property
    def likes_count(self):
        """Gets the likes_count of this V2BookDetail.  # noqa: E501

         点赞数量  # noqa: E501

        :return: The likes_count of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._likes_count

    @likes_count.setter
    def likes_count(self, likes_count):
        """Sets the likes_count of this V2BookDetail.

         点赞数量  # noqa: E501

        :param likes_count: The likes_count of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._likes_count = likes_count

    @property
    def watches_count(self):
        """Gets the watches_count of this V2BookDetail.  # noqa: E501

         订阅数量  # noqa: E501

        :return: The watches_count of this V2BookDetail.  # noqa: E501
        :rtype: int
        """
        return self._watches_count

    @watches_count.setter
    def watches_count(self, watches_count):
        """Sets the watches_count of this V2BookDetail.

         订阅数量  # noqa: E501

        :param watches_count: The watches_count of this V2BookDetail.  # noqa: E501
        :type: int
        """

        self._watches_count = watches_count

    @property
    def content_updated_at(self):
        """Gets the content_updated_at of this V2BookDetail.  # noqa: E501

         知识库 META 更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The content_updated_at of this V2BookDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._content_updated_at

    @content_updated_at.setter
    def content_updated_at(self, content_updated_at):
        """Sets the content_updated_at of this V2BookDetail.

         知识库 META 更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param content_updated_at: The content_updated_at of this V2BookDetail.  # noqa: E501
        :type: datetime
        """

        self._content_updated_at = content_updated_at

    @property
    def created_at(self):
        """Gets the created_at of this V2BookDetail.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2BookDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2BookDetail.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2BookDetail.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2BookDetail.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2BookDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2BookDetail.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2BookDetail.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this V2BookDetail.  # noqa: E501


        :return: The user of this V2BookDetail.  # noqa: E501
        :rtype: V2User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2BookDetail.


        :param user: The user of this V2BookDetail.  # noqa: E501
        :type: V2User
        """

        self._user = user

    @property
    def namespace(self):
        """Gets the namespace of this V2BookDetail.  # noqa: E501

         完整路径  # noqa: E501

        :return: The namespace of this V2BookDetail.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V2BookDetail.

         完整路径  # noqa: E501

        :param namespace: The namespace of this V2BookDetail.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2BookDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2BookDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
