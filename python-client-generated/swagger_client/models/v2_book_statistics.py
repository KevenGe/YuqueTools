# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2BookStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bizdate': 'str',
        'book_id': 'str',
        'slug': 'str',
        'name': 'str',
        'type': 'str',
        'is_public': 'str',
        'content_updated_at_ms': 'str',
        'user_id': 'str',
        'organization_id': 'str',
        'day_read_count': 'str',
        'day_write_count': 'str',
        'day_like_count': 'str',
        'post_count': 'str',
        'word_count': 'str',
        'write_count': 'str',
        'write_count_30': 'str',
        'read_count': 'str',
        'read_count_30': 'str',
        'read_count_365': 'str',
        'like_count': 'str',
        'like_count_7': 'str',
        'like_count_30': 'str',
        'like_count_365': 'str',
        'watch_count': 'str',
        'watch_count_7': 'str',
        'watch_count_30': 'str',
        'watch_count_365': 'str',
        'comment_count': 'str',
        'comment_count_30': 'str',
        'comment_count_365': 'str',
        'like_rank_rate': 'str',
        'popularity_30': 'str',
        'doc_count': 'str',
        'sheet_count': 'str',
        'board_count': 'str',
        'show_count': 'str',
        'resource_count': 'str',
        'artboard_count': 'str',
        'attachment_count': 'str',
        'interaction_people_count': 'str',
        'content_count': 'str',
        'collaboration_count': 'str',
        'working_hours': 'str',
        'baike': 'str',
        'table_count': 'str'
    }

    attribute_map = {
        'bizdate': 'bizdate',
        'book_id': 'book_id',
        'slug': 'slug',
        'name': 'name',
        'type': 'type',
        'is_public': 'is_public',
        'content_updated_at_ms': 'content_updated_at_ms',
        'user_id': 'user_id',
        'organization_id': 'organization_id',
        'day_read_count': 'day_read_count',
        'day_write_count': 'day_write_count',
        'day_like_count': 'day_like_count',
        'post_count': 'post_count',
        'word_count': 'word_count',
        'write_count': 'write_count',
        'write_count_30': 'write_count_30',
        'read_count': 'read_count',
        'read_count_30': 'read_count_30',
        'read_count_365': 'read_count_365',
        'like_count': 'like_count',
        'like_count_7': 'like_count_7',
        'like_count_30': 'like_count_30',
        'like_count_365': 'like_count_365',
        'watch_count': 'watch_count',
        'watch_count_7': 'watch_count_7',
        'watch_count_30': 'watch_count_30',
        'watch_count_365': 'watch_count_365',
        'comment_count': 'comment_count',
        'comment_count_30': 'comment_count_30',
        'comment_count_365': 'comment_count_365',
        'like_rank_rate': 'like_rank_rate',
        'popularity_30': 'popularity_30',
        'doc_count': 'doc_count',
        'sheet_count': 'sheet_count',
        'board_count': 'board_count',
        'show_count': 'show_count',
        'resource_count': 'resource_count',
        'artboard_count': 'artboard_count',
        'attachment_count': 'attachment_count',
        'interaction_people_count': 'interaction_people_count',
        'content_count': 'content_count',
        'collaboration_count': 'collaboration_count',
        'working_hours': 'working_hours',
        'baike': 'baike',
        'table_count': 'table_count'
    }

    def __init__(self, bizdate=None, book_id=None, slug=None, name=None, type=None, is_public=None, content_updated_at_ms=None, user_id=None, organization_id=None, day_read_count=None, day_write_count=None, day_like_count=None, post_count=None, word_count=None, write_count=None, write_count_30=None, read_count=None, read_count_30=None, read_count_365=None, like_count=None, like_count_7=None, like_count_30=None, like_count_365=None, watch_count=None, watch_count_7=None, watch_count_30=None, watch_count_365=None, comment_count=None, comment_count_30=None, comment_count_365=None, like_rank_rate=None, popularity_30=None, doc_count=None, sheet_count=None, board_count=None, show_count=None, resource_count=None, artboard_count=None, attachment_count=None, interaction_people_count=None, content_count=None, collaboration_count=None, working_hours=None, baike=None, table_count=None):  # noqa: E501
        """V2BookStatistics - a model defined in Swagger"""  # noqa: E501
        self._bizdate = None
        self._book_id = None
        self._slug = None
        self._name = None
        self._type = None
        self._is_public = None
        self._content_updated_at_ms = None
        self._user_id = None
        self._organization_id = None
        self._day_read_count = None
        self._day_write_count = None
        self._day_like_count = None
        self._post_count = None
        self._word_count = None
        self._write_count = None
        self._write_count_30 = None
        self._read_count = None
        self._read_count_30 = None
        self._read_count_365 = None
        self._like_count = None
        self._like_count_7 = None
        self._like_count_30 = None
        self._like_count_365 = None
        self._watch_count = None
        self._watch_count_7 = None
        self._watch_count_30 = None
        self._watch_count_365 = None
        self._comment_count = None
        self._comment_count_30 = None
        self._comment_count_365 = None
        self._like_rank_rate = None
        self._popularity_30 = None
        self._doc_count = None
        self._sheet_count = None
        self._board_count = None
        self._show_count = None
        self._resource_count = None
        self._artboard_count = None
        self._attachment_count = None
        self._interaction_people_count = None
        self._content_count = None
        self._collaboration_count = None
        self._working_hours = None
        self._baike = None
        self._table_count = None
        self.discriminator = None
        if bizdate is not None:
            self.bizdate = bizdate
        if book_id is not None:
            self.book_id = book_id
        if slug is not None:
            self.slug = slug
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if is_public is not None:
            self.is_public = is_public
        if content_updated_at_ms is not None:
            self.content_updated_at_ms = content_updated_at_ms
        if user_id is not None:
            self.user_id = user_id
        if organization_id is not None:
            self.organization_id = organization_id
        if day_read_count is not None:
            self.day_read_count = day_read_count
        if day_write_count is not None:
            self.day_write_count = day_write_count
        if day_like_count is not None:
            self.day_like_count = day_like_count
        if post_count is not None:
            self.post_count = post_count
        if word_count is not None:
            self.word_count = word_count
        if write_count is not None:
            self.write_count = write_count
        if write_count_30 is not None:
            self.write_count_30 = write_count_30
        if read_count is not None:
            self.read_count = read_count
        if read_count_30 is not None:
            self.read_count_30 = read_count_30
        if read_count_365 is not None:
            self.read_count_365 = read_count_365
        if like_count is not None:
            self.like_count = like_count
        if like_count_7 is not None:
            self.like_count_7 = like_count_7
        if like_count_30 is not None:
            self.like_count_30 = like_count_30
        if like_count_365 is not None:
            self.like_count_365 = like_count_365
        if watch_count is not None:
            self.watch_count = watch_count
        if watch_count_7 is not None:
            self.watch_count_7 = watch_count_7
        if watch_count_30 is not None:
            self.watch_count_30 = watch_count_30
        if watch_count_365 is not None:
            self.watch_count_365 = watch_count_365
        if comment_count is not None:
            self.comment_count = comment_count
        if comment_count_30 is not None:
            self.comment_count_30 = comment_count_30
        if comment_count_365 is not None:
            self.comment_count_365 = comment_count_365
        if like_rank_rate is not None:
            self.like_rank_rate = like_rank_rate
        if popularity_30 is not None:
            self.popularity_30 = popularity_30
        if doc_count is not None:
            self.doc_count = doc_count
        if sheet_count is not None:
            self.sheet_count = sheet_count
        if board_count is not None:
            self.board_count = board_count
        if show_count is not None:
            self.show_count = show_count
        if resource_count is not None:
            self.resource_count = resource_count
        if artboard_count is not None:
            self.artboard_count = artboard_count
        if attachment_count is not None:
            self.attachment_count = attachment_count
        if interaction_people_count is not None:
            self.interaction_people_count = interaction_people_count
        if content_count is not None:
            self.content_count = content_count
        if collaboration_count is not None:
            self.collaboration_count = collaboration_count
        if working_hours is not None:
            self.working_hours = working_hours
        if baike is not None:
            self.baike = baike
        if table_count is not None:
            self.table_count = table_count

    @property
    def bizdate(self):
        """Gets the bizdate of this V2BookStatistics.  # noqa: E501


        :return: The bizdate of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._bizdate

    @bizdate.setter
    def bizdate(self, bizdate):
        """Sets the bizdate of this V2BookStatistics.


        :param bizdate: The bizdate of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._bizdate = bizdate

    @property
    def book_id(self):
        """Gets the book_id of this V2BookStatistics.  # noqa: E501

        统计日期 (YYYYMMDD)  # noqa: E501

        :return: The book_id of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V2BookStatistics.

        统计日期 (YYYYMMDD)  # noqa: E501

        :param book_id: The book_id of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._book_id = book_id

    @property
    def slug(self):
        """Gets the slug of this V2BookStatistics.  # noqa: E501

        知识库 ID  # noqa: E501

        :return: The slug of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2BookStatistics.

        知识库 ID  # noqa: E501

        :param slug: The slug of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this V2BookStatistics.  # noqa: E501

        知识库 slug  # noqa: E501

        :return: The name of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2BookStatistics.

        知识库 slug  # noqa: E501

        :param name: The name of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this V2BookStatistics.  # noqa: E501

        知识库名称  # noqa: E501

        :return: The type of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2BookStatistics.

        知识库名称  # noqa: E501

        :param type: The type of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_public(self):
        """Gets the is_public of this V2BookStatistics.  # noqa: E501

        知识库类型  # noqa: E501

        :return: The is_public of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this V2BookStatistics.

        知识库类型  # noqa: E501

        :param is_public: The is_public of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._is_public = is_public

    @property
    def content_updated_at_ms(self):
        """Gets the content_updated_at_ms of this V2BookStatistics.  # noqa: E501

        是否公开  # noqa: E501

        :return: The content_updated_at_ms of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._content_updated_at_ms

    @content_updated_at_ms.setter
    def content_updated_at_ms(self, content_updated_at_ms):
        """Sets the content_updated_at_ms of this V2BookStatistics.

        是否公开  # noqa: E501

        :param content_updated_at_ms: The content_updated_at_ms of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._content_updated_at_ms = content_updated_at_ms

    @property
    def user_id(self):
        """Gets the user_id of this V2BookStatistics.  # noqa: E501

        最近更新时间  # noqa: E501

        :return: The user_id of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2BookStatistics.

        最近更新时间  # noqa: E501

        :param user_id: The user_id of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def organization_id(self):
        """Gets the organization_id of this V2BookStatistics.  # noqa: E501

        知识库归属 ID  # noqa: E501

        :return: The organization_id of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this V2BookStatistics.

        知识库归属 ID  # noqa: E501

        :param organization_id: The organization_id of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def day_read_count(self):
        """Gets the day_read_count of this V2BookStatistics.  # noqa: E501

        知识库归属空间 ID  # noqa: E501

        :return: The day_read_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_read_count

    @day_read_count.setter
    def day_read_count(self, day_read_count):
        """Sets the day_read_count of this V2BookStatistics.

        知识库归属空间 ID  # noqa: E501

        :param day_read_count: The day_read_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._day_read_count = day_read_count

    @property
    def day_write_count(self):
        """Gets the day_write_count of this V2BookStatistics.  # noqa: E501

        当日阅读量  # noqa: E501

        :return: The day_write_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_write_count

    @day_write_count.setter
    def day_write_count(self, day_write_count):
        """Sets the day_write_count of this V2BookStatistics.

        当日阅读量  # noqa: E501

        :param day_write_count: The day_write_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._day_write_count = day_write_count

    @property
    def day_like_count(self):
        """Gets the day_like_count of this V2BookStatistics.  # noqa: E501

        当日编辑次数  # noqa: E501

        :return: The day_like_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_like_count

    @day_like_count.setter
    def day_like_count(self, day_like_count):
        """Sets the day_like_count of this V2BookStatistics.

        当日编辑次数  # noqa: E501

        :param day_like_count: The day_like_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._day_like_count = day_like_count

    @property
    def post_count(self):
        """Gets the post_count of this V2BookStatistics.  # noqa: E501

        当日点赞量  # noqa: E501

        :return: The post_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._post_count

    @post_count.setter
    def post_count(self, post_count):
        """Sets the post_count of this V2BookStatistics.

        当日点赞量  # noqa: E501

        :param post_count: The post_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._post_count = post_count

    @property
    def word_count(self):
        """Gets the word_count of this V2BookStatistics.  # noqa: E501

        文档数  # noqa: E501

        :return: The word_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this V2BookStatistics.

        文档数  # noqa: E501

        :param word_count: The word_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._word_count = word_count

    @property
    def write_count(self):
        """Gets the write_count of this V2BookStatistics.  # noqa: E501

        字数  # noqa: E501

        :return: The write_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._write_count

    @write_count.setter
    def write_count(self, write_count):
        """Sets the write_count of this V2BookStatistics.

        字数  # noqa: E501

        :param write_count: The write_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._write_count = write_count

    @property
    def write_count_30(self):
        """Gets the write_count_30 of this V2BookStatistics.  # noqa: E501

        编辑次数  # noqa: E501

        :return: The write_count_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._write_count_30

    @write_count_30.setter
    def write_count_30(self, write_count_30):
        """Sets the write_count_30 of this V2BookStatistics.

        编辑次数  # noqa: E501

        :param write_count_30: The write_count_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._write_count_30 = write_count_30

    @property
    def read_count(self):
        """Gets the read_count of this V2BookStatistics.  # noqa: E501

        编辑次数 (30天)  # noqa: E501

        :return: The read_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count

    @read_count.setter
    def read_count(self, read_count):
        """Sets the read_count of this V2BookStatistics.

        编辑次数 (30天)  # noqa: E501

        :param read_count: The read_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._read_count = read_count

    @property
    def read_count_30(self):
        """Gets the read_count_30 of this V2BookStatistics.  # noqa: E501

        阅读量  # noqa: E501

        :return: The read_count_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count_30

    @read_count_30.setter
    def read_count_30(self, read_count_30):
        """Sets the read_count_30 of this V2BookStatistics.

        阅读量  # noqa: E501

        :param read_count_30: The read_count_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._read_count_30 = read_count_30

    @property
    def read_count_365(self):
        """Gets the read_count_365 of this V2BookStatistics.  # noqa: E501

        阅读量 (30天)  # noqa: E501

        :return: The read_count_365 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count_365

    @read_count_365.setter
    def read_count_365(self, read_count_365):
        """Sets the read_count_365 of this V2BookStatistics.

        阅读量 (30天)  # noqa: E501

        :param read_count_365: The read_count_365 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._read_count_365 = read_count_365

    @property
    def like_count(self):
        """Gets the like_count of this V2BookStatistics.  # noqa: E501

        阅读量 (一年)  # noqa: E501

        :return: The like_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this V2BookStatistics.

        阅读量 (一年)  # noqa: E501

        :param like_count: The like_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._like_count = like_count

    @property
    def like_count_7(self):
        """Gets the like_count_7 of this V2BookStatistics.  # noqa: E501

        点赞量  # noqa: E501

        :return: The like_count_7 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_7

    @like_count_7.setter
    def like_count_7(self, like_count_7):
        """Sets the like_count_7 of this V2BookStatistics.

        点赞量  # noqa: E501

        :param like_count_7: The like_count_7 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_7 = like_count_7

    @property
    def like_count_30(self):
        """Gets the like_count_30 of this V2BookStatistics.  # noqa: E501

        点赞量 (7天)  # noqa: E501

        :return: The like_count_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_30

    @like_count_30.setter
    def like_count_30(self, like_count_30):
        """Sets the like_count_30 of this V2BookStatistics.

        点赞量 (7天)  # noqa: E501

        :param like_count_30: The like_count_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_30 = like_count_30

    @property
    def like_count_365(self):
        """Gets the like_count_365 of this V2BookStatistics.  # noqa: E501

        点赞量 (30天)  # noqa: E501

        :return: The like_count_365 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_365

    @like_count_365.setter
    def like_count_365(self, like_count_365):
        """Sets the like_count_365 of this V2BookStatistics.

        点赞量 (30天)  # noqa: E501

        :param like_count_365: The like_count_365 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_365 = like_count_365

    @property
    def watch_count(self):
        """Gets the watch_count of this V2BookStatistics.  # noqa: E501

        点赞量 (一年)  # noqa: E501

        :return: The watch_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._watch_count

    @watch_count.setter
    def watch_count(self, watch_count):
        """Sets the watch_count of this V2BookStatistics.

        点赞量 (一年)  # noqa: E501

        :param watch_count: The watch_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._watch_count = watch_count

    @property
    def watch_count_7(self):
        """Gets the watch_count_7 of this V2BookStatistics.  # noqa: E501

        关注量  # noqa: E501

        :return: The watch_count_7 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._watch_count_7

    @watch_count_7.setter
    def watch_count_7(self, watch_count_7):
        """Sets the watch_count_7 of this V2BookStatistics.

        关注量  # noqa: E501

        :param watch_count_7: The watch_count_7 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._watch_count_7 = watch_count_7

    @property
    def watch_count_30(self):
        """Gets the watch_count_30 of this V2BookStatistics.  # noqa: E501

        关注量 (7天)  # noqa: E501

        :return: The watch_count_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._watch_count_30

    @watch_count_30.setter
    def watch_count_30(self, watch_count_30):
        """Sets the watch_count_30 of this V2BookStatistics.

        关注量 (7天)  # noqa: E501

        :param watch_count_30: The watch_count_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._watch_count_30 = watch_count_30

    @property
    def watch_count_365(self):
        """Gets the watch_count_365 of this V2BookStatistics.  # noqa: E501

        关注量 (30天)  # noqa: E501

        :return: The watch_count_365 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._watch_count_365

    @watch_count_365.setter
    def watch_count_365(self, watch_count_365):
        """Sets the watch_count_365 of this V2BookStatistics.

        关注量 (30天)  # noqa: E501

        :param watch_count_365: The watch_count_365 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._watch_count_365 = watch_count_365

    @property
    def comment_count(self):
        """Gets the comment_count of this V2BookStatistics.  # noqa: E501

        关注量 (一年)  # noqa: E501

        :return: The comment_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this V2BookStatistics.

        关注量 (一年)  # noqa: E501

        :param comment_count: The comment_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count = comment_count

    @property
    def comment_count_30(self):
        """Gets the comment_count_30 of this V2BookStatistics.  # noqa: E501

        评论量  # noqa: E501

        :return: The comment_count_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count_30

    @comment_count_30.setter
    def comment_count_30(self, comment_count_30):
        """Sets the comment_count_30 of this V2BookStatistics.

        评论量  # noqa: E501

        :param comment_count_30: The comment_count_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count_30 = comment_count_30

    @property
    def comment_count_365(self):
        """Gets the comment_count_365 of this V2BookStatistics.  # noqa: E501

        评论量 (30天)  # noqa: E501

        :return: The comment_count_365 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count_365

    @comment_count_365.setter
    def comment_count_365(self, comment_count_365):
        """Sets the comment_count_365 of this V2BookStatistics.

        评论量 (30天)  # noqa: E501

        :param comment_count_365: The comment_count_365 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count_365 = comment_count_365

    @property
    def like_rank_rate(self):
        """Gets the like_rank_rate of this V2BookStatistics.  # noqa: E501

        评论量 (一年)  # noqa: E501

        :return: The like_rank_rate of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_rank_rate

    @like_rank_rate.setter
    def like_rank_rate(self, like_rank_rate):
        """Sets the like_rank_rate of this V2BookStatistics.

        评论量 (一年)  # noqa: E501

        :param like_rank_rate: The like_rank_rate of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._like_rank_rate = like_rank_rate

    @property
    def popularity_30(self):
        """Gets the popularity_30 of this V2BookStatistics.  # noqa: E501

        知识库点赞数排名  # noqa: E501

        :return: The popularity_30 of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._popularity_30

    @popularity_30.setter
    def popularity_30(self, popularity_30):
        """Sets the popularity_30 of this V2BookStatistics.

        知识库点赞数排名  # noqa: E501

        :param popularity_30: The popularity_30 of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._popularity_30 = popularity_30

    @property
    def doc_count(self):
        """Gets the doc_count of this V2BookStatistics.  # noqa: E501

        30 天热度  # noqa: E501

        :return: The doc_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._doc_count

    @doc_count.setter
    def doc_count(self, doc_count):
        """Sets the doc_count of this V2BookStatistics.

        30 天热度  # noqa: E501

        :param doc_count: The doc_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._doc_count = doc_count

    @property
    def sheet_count(self):
        """Gets the sheet_count of this V2BookStatistics.  # noqa: E501

        文档数量  # noqa: E501

        :return: The sheet_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._sheet_count

    @sheet_count.setter
    def sheet_count(self, sheet_count):
        """Sets the sheet_count of this V2BookStatistics.

        文档数量  # noqa: E501

        :param sheet_count: The sheet_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._sheet_count = sheet_count

    @property
    def board_count(self):
        """Gets the board_count of this V2BookStatistics.  # noqa: E501

        表格数量  # noqa: E501

        :return: The board_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._board_count

    @board_count.setter
    def board_count(self, board_count):
        """Sets the board_count of this V2BookStatistics.

        表格数量  # noqa: E501

        :param board_count: The board_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._board_count = board_count

    @property
    def show_count(self):
        """Gets the show_count of this V2BookStatistics.  # noqa: E501

        画板数量  # noqa: E501

        :return: The show_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._show_count

    @show_count.setter
    def show_count(self, show_count):
        """Sets the show_count of this V2BookStatistics.

        画板数量  # noqa: E501

        :param show_count: The show_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._show_count = show_count

    @property
    def resource_count(self):
        """Gets the resource_count of this V2BookStatistics.  # noqa: E501

        演示文稿数量  # noqa: E501

        :return: The resource_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._resource_count

    @resource_count.setter
    def resource_count(self, resource_count):
        """Sets the resource_count of this V2BookStatistics.

        演示文稿数量  # noqa: E501

        :param resource_count: The resource_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._resource_count = resource_count

    @property
    def artboard_count(self):
        """Gets the artboard_count of this V2BookStatistics.  # noqa: E501

        资源数量  # noqa: E501

        :return: The artboard_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._artboard_count

    @artboard_count.setter
    def artboard_count(self, artboard_count):
        """Sets the artboard_count of this V2BookStatistics.

        资源数量  # noqa: E501

        :param artboard_count: The artboard_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._artboard_count = artboard_count

    @property
    def attachment_count(self):
        """Gets the attachment_count of this V2BookStatistics.  # noqa: E501

        图集数量  # noqa: E501

        :return: The attachment_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this V2BookStatistics.

        图集数量  # noqa: E501

        :param attachment_count: The attachment_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._attachment_count = attachment_count

    @property
    def interaction_people_count(self):
        """Gets the interaction_people_count of this V2BookStatistics.  # noqa: E501

        附件数量  # noqa: E501

        :return: The interaction_people_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._interaction_people_count

    @interaction_people_count.setter
    def interaction_people_count(self, interaction_people_count):
        """Sets the interaction_people_count of this V2BookStatistics.

        附件数量  # noqa: E501

        :param interaction_people_count: The interaction_people_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._interaction_people_count = interaction_people_count

    @property
    def content_count(self):
        """Gets the content_count of this V2BookStatistics.  # noqa: E501

        知识交流人数  # noqa: E501

        :return: The content_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._content_count

    @content_count.setter
    def content_count(self, content_count):
        """Sets the content_count of this V2BookStatistics.

        知识交流人数  # noqa: E501

        :param content_count: The content_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._content_count = content_count

    @property
    def collaboration_count(self):
        """Gets the collaboration_count of this V2BookStatistics.  # noqa: E501

        知识财富数  # noqa: E501

        :return: The collaboration_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._collaboration_count

    @collaboration_count.setter
    def collaboration_count(self, collaboration_count):
        """Sets the collaboration_count of this V2BookStatistics.

        知识财富数  # noqa: E501

        :param collaboration_count: The collaboration_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._collaboration_count = collaboration_count

    @property
    def working_hours(self):
        """Gets the working_hours of this V2BookStatistics.  # noqa: E501

        知识协同次数  # noqa: E501

        :return: The working_hours of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._working_hours

    @working_hours.setter
    def working_hours(self, working_hours):
        """Sets the working_hours of this V2BookStatistics.

        知识协同次数  # noqa: E501

        :param working_hours: The working_hours of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._working_hours = working_hours

    @property
    def baike(self):
        """Gets the baike of this V2BookStatistics.  # noqa: E501

        协同提效时长 (小时)  # noqa: E501

        :return: The baike of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._baike

    @baike.setter
    def baike(self, baike):
        """Sets the baike of this V2BookStatistics.

        协同提效时长 (小时)  # noqa: E501

        :param baike: The baike of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._baike = baike

    @property
    def table_count(self):
        """Gets the table_count of this V2BookStatistics.  # noqa: E501

        百科全书卷数  # noqa: E501

        :return: The table_count of this V2BookStatistics.  # noqa: E501
        :rtype: str
        """
        return self._table_count

    @table_count.setter
    def table_count(self, table_count):
        """Sets the table_count of this V2BookStatistics.

        百科全书卷数  # noqa: E501

        :param table_count: The table_count of this V2BookStatistics.  # noqa: E501
        :type: str
        """

        self._table_count = table_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2BookStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2BookStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
