# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2DocStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bizdate': 'str',
        'book_id': 'str',
        'doc_id': 'str',
        'slug': 'str',
        'title': 'str',
        'type': 'str',
        'is_public': 'str',
        'created_at': 'str',
        'content_updated_at': 'str',
        'user_id': 'str',
        'organization_id': 'str',
        'day_read_count': 'str',
        'day_write_count': 'str',
        'day_like_count': 'str',
        'word_count': 'str',
        'write_count': 'str',
        'read_count': 'str',
        'read_count_7': 'str',
        'read_count_30': 'str',
        'read_count_365': 'str',
        'like_count': 'str',
        'like_count_7': 'str',
        'like_count_30': 'str',
        'like_count_365': 'str',
        'comment_count': 'str',
        'comment_count_30': 'str',
        'comment_count_365': 'str',
        'popularity_30': 'str',
        'attachment_count': 'str',
        'user': 'str'
    }

    attribute_map = {
        'bizdate': 'bizdate',
        'book_id': 'book_id',
        'doc_id': 'doc_id',
        'slug': 'slug',
        'title': 'title',
        'type': 'type',
        'is_public': 'is_public',
        'created_at': 'created_at',
        'content_updated_at': 'content_updated_at',
        'user_id': 'user_id',
        'organization_id': 'organization_id',
        'day_read_count': 'day_read_count',
        'day_write_count': 'day_write_count',
        'day_like_count': 'day_like_count',
        'word_count': 'word_count',
        'write_count': 'write_count',
        'read_count': 'read_count',
        'read_count_7': 'read_count_7',
        'read_count_30': 'read_count_30',
        'read_count_365': 'read_count_365',
        'like_count': 'like_count',
        'like_count_7': 'like_count_7',
        'like_count_30': 'like_count_30',
        'like_count_365': 'like_count_365',
        'comment_count': 'comment_count',
        'comment_count_30': 'comment_count_30',
        'comment_count_365': 'comment_count_365',
        'popularity_30': 'popularity_30',
        'attachment_count': 'attachment_count',
        'user': 'user'
    }

    def __init__(self, bizdate=None, book_id=None, doc_id=None, slug=None, title=None, type=None, is_public=None, created_at=None, content_updated_at=None, user_id=None, organization_id=None, day_read_count=None, day_write_count=None, day_like_count=None, word_count=None, write_count=None, read_count=None, read_count_7=None, read_count_30=None, read_count_365=None, like_count=None, like_count_7=None, like_count_30=None, like_count_365=None, comment_count=None, comment_count_30=None, comment_count_365=None, popularity_30=None, attachment_count=None, user=None):  # noqa: E501
        """V2DocStatistics - a model defined in Swagger"""  # noqa: E501
        self._bizdate = None
        self._book_id = None
        self._doc_id = None
        self._slug = None
        self._title = None
        self._type = None
        self._is_public = None
        self._created_at = None
        self._content_updated_at = None
        self._user_id = None
        self._organization_id = None
        self._day_read_count = None
        self._day_write_count = None
        self._day_like_count = None
        self._word_count = None
        self._write_count = None
        self._read_count = None
        self._read_count_7 = None
        self._read_count_30 = None
        self._read_count_365 = None
        self._like_count = None
        self._like_count_7 = None
        self._like_count_30 = None
        self._like_count_365 = None
        self._comment_count = None
        self._comment_count_30 = None
        self._comment_count_365 = None
        self._popularity_30 = None
        self._attachment_count = None
        self._user = None
        self.discriminator = None
        if bizdate is not None:
            self.bizdate = bizdate
        if book_id is not None:
            self.book_id = book_id
        if doc_id is not None:
            self.doc_id = doc_id
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if is_public is not None:
            self.is_public = is_public
        if created_at is not None:
            self.created_at = created_at
        if content_updated_at is not None:
            self.content_updated_at = content_updated_at
        if user_id is not None:
            self.user_id = user_id
        if organization_id is not None:
            self.organization_id = organization_id
        if day_read_count is not None:
            self.day_read_count = day_read_count
        if day_write_count is not None:
            self.day_write_count = day_write_count
        if day_like_count is not None:
            self.day_like_count = day_like_count
        if word_count is not None:
            self.word_count = word_count
        if write_count is not None:
            self.write_count = write_count
        if read_count is not None:
            self.read_count = read_count
        if read_count_7 is not None:
            self.read_count_7 = read_count_7
        if read_count_30 is not None:
            self.read_count_30 = read_count_30
        if read_count_365 is not None:
            self.read_count_365 = read_count_365
        if like_count is not None:
            self.like_count = like_count
        if like_count_7 is not None:
            self.like_count_7 = like_count_7
        if like_count_30 is not None:
            self.like_count_30 = like_count_30
        if like_count_365 is not None:
            self.like_count_365 = like_count_365
        if comment_count is not None:
            self.comment_count = comment_count
        if comment_count_30 is not None:
            self.comment_count_30 = comment_count_30
        if comment_count_365 is not None:
            self.comment_count_365 = comment_count_365
        if popularity_30 is not None:
            self.popularity_30 = popularity_30
        if attachment_count is not None:
            self.attachment_count = attachment_count
        if user is not None:
            self.user = user

    @property
    def bizdate(self):
        """Gets the bizdate of this V2DocStatistics.  # noqa: E501


        :return: The bizdate of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._bizdate

    @bizdate.setter
    def bizdate(self, bizdate):
        """Sets the bizdate of this V2DocStatistics.


        :param bizdate: The bizdate of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._bizdate = bizdate

    @property
    def book_id(self):
        """Gets the book_id of this V2DocStatistics.  # noqa: E501

        统计日期 (YYYYMMDD)  # noqa: E501

        :return: The book_id of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V2DocStatistics.

        统计日期 (YYYYMMDD)  # noqa: E501

        :param book_id: The book_id of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._book_id = book_id

    @property
    def doc_id(self):
        """Gets the doc_id of this V2DocStatistics.  # noqa: E501

        知识库 ID  # noqa: E501

        :return: The doc_id of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this V2DocStatistics.

        知识库 ID  # noqa: E501

        :param doc_id: The doc_id of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._doc_id = doc_id

    @property
    def slug(self):
        """Gets the slug of this V2DocStatistics.  # noqa: E501

        文档 ID  # noqa: E501

        :return: The slug of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2DocStatistics.

        文档 ID  # noqa: E501

        :param slug: The slug of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this V2DocStatistics.  # noqa: E501

        文档 slug  # noqa: E501

        :return: The title of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2DocStatistics.

        文档 slug  # noqa: E501

        :param title: The title of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this V2DocStatistics.  # noqa: E501

        文档标题  # noqa: E501

        :return: The type of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2DocStatistics.

        文档标题  # noqa: E501

        :param type: The type of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_public(self):
        """Gets the is_public of this V2DocStatistics.  # noqa: E501

        知识库类型  # noqa: E501

        :return: The is_public of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this V2DocStatistics.

        知识库类型  # noqa: E501

        :param is_public: The is_public of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._is_public = is_public

    @property
    def created_at(self):
        """Gets the created_at of this V2DocStatistics.  # noqa: E501

        是否公开  # noqa: E501

        :return: The created_at of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2DocStatistics.

        是否公开  # noqa: E501

        :param created_at: The created_at of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def content_updated_at(self):
        """Gets the content_updated_at of this V2DocStatistics.  # noqa: E501

        创建时间  # noqa: E501

        :return: The content_updated_at of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._content_updated_at

    @content_updated_at.setter
    def content_updated_at(self, content_updated_at):
        """Sets the content_updated_at of this V2DocStatistics.

        创建时间  # noqa: E501

        :param content_updated_at: The content_updated_at of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._content_updated_at = content_updated_at

    @property
    def user_id(self):
        """Gets the user_id of this V2DocStatistics.  # noqa: E501

        最近更新时间  # noqa: E501

        :return: The user_id of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2DocStatistics.

        最近更新时间  # noqa: E501

        :param user_id: The user_id of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def organization_id(self):
        """Gets the organization_id of this V2DocStatistics.  # noqa: E501

        文档归属 ID  # noqa: E501

        :return: The organization_id of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this V2DocStatistics.

        文档归属 ID  # noqa: E501

        :param organization_id: The organization_id of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def day_read_count(self):
        """Gets the day_read_count of this V2DocStatistics.  # noqa: E501

        文档归属空间 ID  # noqa: E501

        :return: The day_read_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_read_count

    @day_read_count.setter
    def day_read_count(self, day_read_count):
        """Sets the day_read_count of this V2DocStatistics.

        文档归属空间 ID  # noqa: E501

        :param day_read_count: The day_read_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._day_read_count = day_read_count

    @property
    def day_write_count(self):
        """Gets the day_write_count of this V2DocStatistics.  # noqa: E501

        当日阅读量  # noqa: E501

        :return: The day_write_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_write_count

    @day_write_count.setter
    def day_write_count(self, day_write_count):
        """Sets the day_write_count of this V2DocStatistics.

        当日阅读量  # noqa: E501

        :param day_write_count: The day_write_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._day_write_count = day_write_count

    @property
    def day_like_count(self):
        """Gets the day_like_count of this V2DocStatistics.  # noqa: E501

        当日编辑次数  # noqa: E501

        :return: The day_like_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._day_like_count

    @day_like_count.setter
    def day_like_count(self, day_like_count):
        """Sets the day_like_count of this V2DocStatistics.

        当日编辑次数  # noqa: E501

        :param day_like_count: The day_like_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._day_like_count = day_like_count

    @property
    def word_count(self):
        """Gets the word_count of this V2DocStatistics.  # noqa: E501

        当日点赞量  # noqa: E501

        :return: The word_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this V2DocStatistics.

        当日点赞量  # noqa: E501

        :param word_count: The word_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._word_count = word_count

    @property
    def write_count(self):
        """Gets the write_count of this V2DocStatistics.  # noqa: E501

        字数  # noqa: E501

        :return: The write_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._write_count

    @write_count.setter
    def write_count(self, write_count):
        """Sets the write_count of this V2DocStatistics.

        字数  # noqa: E501

        :param write_count: The write_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._write_count = write_count

    @property
    def read_count(self):
        """Gets the read_count of this V2DocStatistics.  # noqa: E501

        编辑次数  # noqa: E501

        :return: The read_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count

    @read_count.setter
    def read_count(self, read_count):
        """Sets the read_count of this V2DocStatistics.

        编辑次数  # noqa: E501

        :param read_count: The read_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._read_count = read_count

    @property
    def read_count_7(self):
        """Gets the read_count_7 of this V2DocStatistics.  # noqa: E501

        阅读量  # noqa: E501

        :return: The read_count_7 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count_7

    @read_count_7.setter
    def read_count_7(self, read_count_7):
        """Sets the read_count_7 of this V2DocStatistics.

        阅读量  # noqa: E501

        :param read_count_7: The read_count_7 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._read_count_7 = read_count_7

    @property
    def read_count_30(self):
        """Gets the read_count_30 of this V2DocStatistics.  # noqa: E501

        阅读量 (7天)  # noqa: E501

        :return: The read_count_30 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count_30

    @read_count_30.setter
    def read_count_30(self, read_count_30):
        """Sets the read_count_30 of this V2DocStatistics.

        阅读量 (7天)  # noqa: E501

        :param read_count_30: The read_count_30 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._read_count_30 = read_count_30

    @property
    def read_count_365(self):
        """Gets the read_count_365 of this V2DocStatistics.  # noqa: E501

        阅读量 (30天)  # noqa: E501

        :return: The read_count_365 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._read_count_365

    @read_count_365.setter
    def read_count_365(self, read_count_365):
        """Sets the read_count_365 of this V2DocStatistics.

        阅读量 (30天)  # noqa: E501

        :param read_count_365: The read_count_365 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._read_count_365 = read_count_365

    @property
    def like_count(self):
        """Gets the like_count of this V2DocStatistics.  # noqa: E501

        阅读量 (一年)  # noqa: E501

        :return: The like_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this V2DocStatistics.

        阅读量 (一年)  # noqa: E501

        :param like_count: The like_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._like_count = like_count

    @property
    def like_count_7(self):
        """Gets the like_count_7 of this V2DocStatistics.  # noqa: E501

        点赞量  # noqa: E501

        :return: The like_count_7 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_7

    @like_count_7.setter
    def like_count_7(self, like_count_7):
        """Sets the like_count_7 of this V2DocStatistics.

        点赞量  # noqa: E501

        :param like_count_7: The like_count_7 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_7 = like_count_7

    @property
    def like_count_30(self):
        """Gets the like_count_30 of this V2DocStatistics.  # noqa: E501

        点赞量 (7天)  # noqa: E501

        :return: The like_count_30 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_30

    @like_count_30.setter
    def like_count_30(self, like_count_30):
        """Sets the like_count_30 of this V2DocStatistics.

        点赞量 (7天)  # noqa: E501

        :param like_count_30: The like_count_30 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_30 = like_count_30

    @property
    def like_count_365(self):
        """Gets the like_count_365 of this V2DocStatistics.  # noqa: E501

        点赞量 (30天)  # noqa: E501

        :return: The like_count_365 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._like_count_365

    @like_count_365.setter
    def like_count_365(self, like_count_365):
        """Sets the like_count_365 of this V2DocStatistics.

        点赞量 (30天)  # noqa: E501

        :param like_count_365: The like_count_365 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._like_count_365 = like_count_365

    @property
    def comment_count(self):
        """Gets the comment_count of this V2DocStatistics.  # noqa: E501

        点赞量 (一年)  # noqa: E501

        :return: The comment_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this V2DocStatistics.

        点赞量 (一年)  # noqa: E501

        :param comment_count: The comment_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count = comment_count

    @property
    def comment_count_30(self):
        """Gets the comment_count_30 of this V2DocStatistics.  # noqa: E501

        评论量  # noqa: E501

        :return: The comment_count_30 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count_30

    @comment_count_30.setter
    def comment_count_30(self, comment_count_30):
        """Sets the comment_count_30 of this V2DocStatistics.

        评论量  # noqa: E501

        :param comment_count_30: The comment_count_30 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count_30 = comment_count_30

    @property
    def comment_count_365(self):
        """Gets the comment_count_365 of this V2DocStatistics.  # noqa: E501

        评论量 (30天)  # noqa: E501

        :return: The comment_count_365 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._comment_count_365

    @comment_count_365.setter
    def comment_count_365(self, comment_count_365):
        """Sets the comment_count_365 of this V2DocStatistics.

        评论量 (30天)  # noqa: E501

        :param comment_count_365: The comment_count_365 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._comment_count_365 = comment_count_365

    @property
    def popularity_30(self):
        """Gets the popularity_30 of this V2DocStatistics.  # noqa: E501

        评论量 (一年)  # noqa: E501

        :return: The popularity_30 of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._popularity_30

    @popularity_30.setter
    def popularity_30(self, popularity_30):
        """Sets the popularity_30 of this V2DocStatistics.

        评论量 (一年)  # noqa: E501

        :param popularity_30: The popularity_30 of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._popularity_30 = popularity_30

    @property
    def attachment_count(self):
        """Gets the attachment_count of this V2DocStatistics.  # noqa: E501

        30 天热度  # noqa: E501

        :return: The attachment_count of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._attachment_count

    @attachment_count.setter
    def attachment_count(self, attachment_count):
        """Sets the attachment_count of this V2DocStatistics.

        30 天热度  # noqa: E501

        :param attachment_count: The attachment_count of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._attachment_count = attachment_count

    @property
    def user(self):
        """Gets the user of this V2DocStatistics.  # noqa: E501

        附件数量  # noqa: E501

        :return: The user of this V2DocStatistics.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2DocStatistics.

        附件数量  # noqa: E501

        :param user: The user of this V2DocStatistics.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2DocStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2DocStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
