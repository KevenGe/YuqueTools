# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2DocVersionDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'doc_id': 'int',
        'slug': 'str',
        'title': 'str',
        'user_id': 'int',
        'format': 'str',
        'body': 'str',
        'body_html': 'str',
        'body_asl': 'str',
        'diff': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'user': 'V2User'
    }

    attribute_map = {
        'id': 'id',
        'doc_id': 'doc_id',
        'slug': 'slug',
        'title': 'title',
        'user_id': 'user_id',
        'format': 'format',
        'body': 'body',
        'body_html': 'body_html',
        'body_asl': 'body_asl',
        'diff': 'diff',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'user': 'user'
    }

    def __init__(self, id=None, doc_id=None, slug=None, title=None, user_id=None, format=None, body=None, body_html=None, body_asl=None, diff=None, created_at=None, updated_at=None, user=None):  # noqa: E501
        """V2DocVersionDetail - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._doc_id = None
        self._slug = None
        self._title = None
        self._user_id = None
        self._format = None
        self._body = None
        self._body_html = None
        self._body_asl = None
        self._diff = None
        self._created_at = None
        self._updated_at = None
        self._user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if doc_id is not None:
            self.doc_id = doc_id
        if slug is not None:
            self.slug = slug
        if title is not None:
            self.title = title
        if user_id is not None:
            self.user_id = user_id
        if format is not None:
            self.format = format
        if body is not None:
            self.body = body
        if body_html is not None:
            self.body_html = body_html
        if body_asl is not None:
            self.body_asl = body_asl
        if diff is not None:
            self.diff = diff
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this V2DocVersionDetail.  # noqa: E501

         版本 ID  # noqa: E501

        :return: The id of this V2DocVersionDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2DocVersionDetail.

         版本 ID  # noqa: E501

        :param id: The id of this V2DocVersionDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def doc_id(self):
        """Gets the doc_id of this V2DocVersionDetail.  # noqa: E501

         文档 ID  # noqa: E501

        :return: The doc_id of this V2DocVersionDetail.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this V2DocVersionDetail.

         文档 ID  # noqa: E501

        :param doc_id: The doc_id of this V2DocVersionDetail.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def slug(self):
        """Gets the slug of this V2DocVersionDetail.  # noqa: E501

         文档路径  # noqa: E501

        :return: The slug of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2DocVersionDetail.

         文档路径  # noqa: E501

        :param slug: The slug of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this V2DocVersionDetail.  # noqa: E501

         文档标题  # noqa: E501

        :return: The title of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2DocVersionDetail.

         文档标题  # noqa: E501

        :param title: The title of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user_id(self):
        """Gets the user_id of this V2DocVersionDetail.  # noqa: E501

         发版人 ID  # noqa: E501

        :return: The user_id of this V2DocVersionDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2DocVersionDetail.

         发版人 ID  # noqa: E501

        :param user_id: The user_id of this V2DocVersionDetail.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def format(self):
        """Gets the format of this V2DocVersionDetail.  # noqa: E501

         内容格式 (markdown:Markdown 格式, lake:语雀 Lake 格式, html:HTML 标准格式, lakesheet:语雀表格)  # noqa: E501

        :return: The format of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this V2DocVersionDetail.

         内容格式 (markdown:Markdown 格式, lake:语雀 Lake 格式, html:HTML 标准格式, lakesheet:语雀表格)  # noqa: E501

        :param format: The format of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["markdown", "lake", "html", "lakesheet"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def body(self):
        """Gets the body of this V2DocVersionDetail.  # noqa: E501

         正文原始内容  # noqa: E501

        :return: The body of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this V2DocVersionDetail.

         正文原始内容  # noqa: E501

        :param body: The body of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_html(self):
        """Gets the body_html of this V2DocVersionDetail.  # noqa: E501

         正文 HTML 标准格式内容  # noqa: E501

        :return: The body_html of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this V2DocVersionDetail.

         正文 HTML 标准格式内容  # noqa: E501

        :param body_html: The body_html of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._body_html = body_html

    @property
    def body_asl(self):
        """Gets the body_asl of this V2DocVersionDetail.  # noqa: E501

         正文语雀 Lake 格式内容  # noqa: E501

        :return: The body_asl of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._body_asl

    @body_asl.setter
    def body_asl(self, body_asl):
        """Sets the body_asl of this V2DocVersionDetail.

         正文语雀 Lake 格式内容  # noqa: E501

        :param body_asl: The body_asl of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._body_asl = body_asl

    @property
    def diff(self):
        """Gets the diff of this V2DocVersionDetail.  # noqa: E501

         版本 DIFF  # noqa: E501

        :return: The diff of this V2DocVersionDetail.  # noqa: E501
        :rtype: str
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this V2DocVersionDetail.

         版本 DIFF  # noqa: E501

        :param diff: The diff of this V2DocVersionDetail.  # noqa: E501
        :type: str
        """

        self._diff = diff

    @property
    def created_at(self):
        """Gets the created_at of this V2DocVersionDetail.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2DocVersionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2DocVersionDetail.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2DocVersionDetail.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2DocVersionDetail.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2DocVersionDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2DocVersionDetail.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2DocVersionDetail.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this V2DocVersionDetail.  # noqa: E501


        :return: The user of this V2DocVersionDetail.  # noqa: E501
        :rtype: V2User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2DocVersionDetail.


        :param user: The user of this V2DocVersionDetail.  # noqa: E501
        :type: V2User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2DocVersionDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2DocVersionDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
