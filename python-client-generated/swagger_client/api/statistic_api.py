# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatisticApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def statistic_api_v2_statistic_all(self, login, **kwargs):  # noqa: E501
        """团队.汇总统计数据  # noqa: E501

        团队.汇总统计数据 GET /api/v2/groups/:login/statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_all(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statistic_api_v2_statistic_all_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.statistic_api_v2_statistic_all_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def statistic_api_v2_statistic_all_with_http_info(self, login, **kwargs):  # noqa: E501
        """团队.汇总统计数据  # noqa: E501

        团队.汇总统计数据 GET /api/v2/groups/:login/statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_all_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistic_api_v2_statistic_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `statistic_api_v2_statistic_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statistic_api_v2_statistic_by_books(self, login, **kwargs):  # noqa: E501
        """团队.知识库统计数据  # noqa: E501

        团队.知识库统计数据 GET /api/v2/groups/:login/statistics/books  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_books(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param str name: 知识库名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statistic_api_v2_statistic_by_books_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.statistic_api_v2_statistic_by_books_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def statistic_api_v2_statistic_by_books_with_http_info(self, login, **kwargs):  # noqa: E501
        """团队.知识库统计数据  # noqa: E501

        团队.知识库统计数据 GET /api/v2/groups/:login/statistics/books  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_books_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param str name: 知识库名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'name', 'range', 'page', 'limit', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistic_api_v2_statistic_by_books" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `statistic_api_v2_statistic_by_books`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/statistics/books', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statistic_api_v2_statistic_by_docs(self, login, **kwargs):  # noqa: E501
        """团队.文档统计数据  # noqa: E501

        团队.文档统计数据 GET /api/v2/groups/:login/statistics/docs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_docs(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param int book_id: 指定知识库 [过滤条件]
        :param str name: 文档名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statistic_api_v2_statistic_by_docs_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.statistic_api_v2_statistic_by_docs_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def statistic_api_v2_statistic_by_docs_with_http_info(self, login, **kwargs):  # noqa: E501
        """团队.文档统计数据  # noqa: E501

        团队.文档统计数据 GET /api/v2/groups/:login/statistics/docs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_docs_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param int book_id: 指定知识库 [过滤条件]
        :param str name: 文档名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'book_id', 'name', 'range', 'page', 'limit', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistic_api_v2_statistic_by_docs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `statistic_api_v2_statistic_by_docs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []
        if 'book_id' in params:
            query_params.append(('bookId', params['book_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/statistics/docs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def statistic_api_v2_statistic_by_members(self, login, **kwargs):  # noqa: E501
        """团队.成员统计数据  # noqa: E501

        团队.成员统计数据 GET /api/v2/groups/:login/statistics/members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_members(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param str name: 成员名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.statistic_api_v2_statistic_by_members_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.statistic_api_v2_statistic_by_members_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def statistic_api_v2_statistic_by_members_with_http_info(self, login, **kwargs):  # noqa: E501
        """团队.成员统计数据  # noqa: E501

        团队.成员统计数据 GET /api/v2/groups/:login/statistics/members  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.statistic_api_v2_statistic_by_members_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 团队的 Login 或 ID (required)
        :param str name: 成员名 [过滤条件]
        :param str range: 时间范围 [过滤条件] (0:全部, 30:近 30 天, 365:近一年)
        :param int page: 页码
        :param int limit: 分页数量
        :param str sort_field: 排序字段
        :param str sort_order: 排序方向
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'name', 'range', 'page', 'limit', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method statistic_api_v2_statistic_by_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `statistic_api_v2_statistic_by_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/statistics/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
