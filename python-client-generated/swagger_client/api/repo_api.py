# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RepoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def repo_api_v2_repo_create(self, login, **kwargs):  # noqa: E501
        """创建知识库  # noqa: E501

        创建知识库 POST /api/v2/groups/:id/repos POST /api/v2/groups/:login/repos   POST /api/v2/users/:id/repos POST /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_create(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_create_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_create_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_create_with_http_info(self, login, **kwargs):  # noqa: E501
        """创建知识库  # noqa: E501

        创建知识库 POST /api/v2/groups/:id/repos POST /api/v2/groups/:login/repos   POST /api/v2/users/:id/repos POST /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_create_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `repo_api_v2_repo_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{login}/repos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_create_by_group(self, login, **kwargs):  # noqa: E501
        """创建知识库  # noqa: E501

        创建知识库 POST /api/v2/groups/:id/repos POST /api/v2/groups/:login/repos   POST /api/v2/users/:id/repos POST /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_create_by_group(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_create_by_group_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_create_by_group_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_create_by_group_with_http_info(self, login, **kwargs):  # noqa: E501
        """创建知识库  # noqa: E501

        创建知识库 POST /api/v2/groups/:id/repos POST /api/v2/groups/:login/repos   POST /api/v2/users/:id/repos POST /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_create_by_group_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_create_by_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `repo_api_v2_repo_create_by_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/repos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_destroy(self, group_login, book_slug, **kwargs):  # noqa: E501
        """删除知识库  # noqa: E501

        删除知识库 DELETE /api/v2/repos/:book_id DELETE /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_destroy(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_destroy_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_destroy_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_destroy_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """删除知识库  # noqa: E501

        删除知识库 DELETE /api/v2/repos/:book_id DELETE /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_destroy_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `repo_api_v2_repo_destroy`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `repo_api_v2_repo_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_destroy_by_id(self, book_id, **kwargs):  # noqa: E501
        """删除知识库  # noqa: E501

        删除知识库 DELETE /api/v2/repos/:book_id DELETE /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_destroy_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_destroy_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_destroy_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_destroy_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """删除知识库  # noqa: E501

        删除知识库 DELETE /api/v2/repos/:book_id DELETE /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_destroy_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_destroy_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `repo_api_v2_repo_destroy_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_list(self, login, **kwargs):  # noqa: E501
        """获取知识库列表  # noqa: E501

        获取知识库列表 GET /api/v2/groups/:id/repos GET /api/v2/groups/:login/repos   GET /api/v2/users/:id/repos GET /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_list(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str type: 类型 [筛选条件] (Book:文档型知识库, Design: 画板型知识库)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_list_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_list_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_list_with_http_info(self, login, **kwargs):  # noqa: E501
        """获取知识库列表  # noqa: E501

        获取知识库列表 GET /api/v2/groups/:id/repos GET /api/v2/groups/:login/repos   GET /api/v2/users/:id/repos GET /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_list_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str type: 类型 [筛选条件] (Book:文档型知识库, Design: 画板型知识库)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'offset', 'limit', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `repo_api_v2_repo_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{login}/repos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_list_by_group(self, login, **kwargs):  # noqa: E501
        """获取知识库列表  # noqa: E501

        获取知识库列表 GET /api/v2/groups/:id/repos GET /api/v2/groups/:login/repos   GET /api/v2/users/:id/repos GET /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_list_by_group(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str type: 类型 [筛选条件] (Book:文档型知识库, Design: 画板型知识库)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_list_by_group_with_http_info(login, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_list_by_group_with_http_info(login, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_list_by_group_with_http_info(self, login, **kwargs):  # noqa: E501
        """获取知识库列表  # noqa: E501

        获取知识库列表 GET /api/v2/groups/:id/repos GET /api/v2/groups/:login/repos   GET /api/v2/users/:id/repos GET /api/v2/users/:login/repos    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_list_by_group_with_http_info(login, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: 用户/团队的 Login 或 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str type: 类型 [筛选条件] (Book:文档型知识库, Design: 画板型知识库)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'offset', 'limit', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_list_by_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `repo_api_v2_repo_list_by_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/groups/{login}/repos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_show(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取知识库详情  # noqa: E501

        获取知识库详情 GET /api/v2/repos/:book_id GET /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_show(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_show_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_show_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_show_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取知识库详情  # noqa: E501

        获取知识库详情 GET /api/v2/repos/:book_id GET /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_show_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `repo_api_v2_repo_show`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `repo_api_v2_repo_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_show_by_id(self, book_id, **kwargs):  # noqa: E501
        """获取知识库详情  # noqa: E501

        获取知识库详情 GET /api/v2/repos/:book_id GET /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_show_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_show_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_show_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_show_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """获取知识库详情  # noqa: E501

        获取知识库详情 GET /api/v2/repos/:book_id GET /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_show_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_show_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `repo_api_v2_repo_show_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_update(self, group_login, book_slug, **kwargs):  # noqa: E501
        """更新知识库  # noqa: E501

        更新知识库 PUT /api/v2/repos/:book_id PUT /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_update(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_update_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_update_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_update_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """更新知识库  # noqa: E501

        更新知识库 PUT /api/v2/repos/:book_id PUT /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_update_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `repo_api_v2_repo_update`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `repo_api_v2_repo_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repo_api_v2_repo_update_by_id(self, book_id, **kwargs):  # noqa: E501
        """更新知识库  # noqa: E501

        更新知识库 PUT /api/v2/repos/:book_id PUT /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_update_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.repo_api_v2_repo_update_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.repo_api_v2_repo_update_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def repo_api_v2_repo_update_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """更新知识库  # noqa: E501

        更新知识库 PUT /api/v2/repos/:book_id PUT /api/v2/repos/:group_login/:book_slug    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.repo_api_v2_repo_update_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repo_api_v2_repo_update_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `repo_api_v2_repo_update_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
