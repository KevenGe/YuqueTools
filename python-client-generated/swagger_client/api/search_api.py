# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_api_v2_search(self, q, type, **kwargs):  # noqa: E501
        """通用搜索  # noqa: E501

        通用搜索 GET /api/v2/search   - 支持分页, PageSize 固定为 20    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_api_v2_search(q, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 搜索关键词 (required)
        :param str type: 搜索类型 (doc:文档, repo:知识库) (required)
        :param str scope: 搜索范围, 不填默认为搜索当前用户/团队   [例子] ``` - 假设:   - 团队 URL = https://yuque_domain/group_a   - 知识库 URL = https://yuque_domain/group_a/book_x - 则:   - 搜索团队里的文档: { type: 'doc', scope: 'group_a' }   - 搜索团队里的知识库: { type: 'repo', scope: 'group_a' }   - 搜索知识库里的文档: { type: 'doc', scope: 'group_a/book_x' } ```
        :param int page: 页码 [分页参数]
        :param int offset: 页码, 非偏移量 [分页参数]
        :param bool strict: 关键词精确匹配, 不分词
        :param bool related: 仅搜索与我相关 [筛选条件]
        :param int creator_id: 仅搜索指定作者 ID [筛选条件]
        :param str creator: 仅搜索指定作者 login [筛选条件]
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_api_v2_search_with_http_info(q, type, **kwargs)  # noqa: E501
        else:
            (data) = self.search_api_v2_search_with_http_info(q, type, **kwargs)  # noqa: E501
            return data

    def search_api_v2_search_with_http_info(self, q, type, **kwargs):  # noqa: E501
        """通用搜索  # noqa: E501

        通用搜索 GET /api/v2/search   - 支持分页, PageSize 固定为 20    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_api_v2_search_with_http_info(q, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: 搜索关键词 (required)
        :param str type: 搜索类型 (doc:文档, repo:知识库) (required)
        :param str scope: 搜索范围, 不填默认为搜索当前用户/团队   [例子] ``` - 假设:   - 团队 URL = https://yuque_domain/group_a   - 知识库 URL = https://yuque_domain/group_a/book_x - 则:   - 搜索团队里的文档: { type: 'doc', scope: 'group_a' }   - 搜索团队里的知识库: { type: 'repo', scope: 'group_a' }   - 搜索知识库里的文档: { type: 'doc', scope: 'group_a/book_x' } ```
        :param int page: 页码 [分页参数]
        :param int offset: 页码, 非偏移量 [分页参数]
        :param bool strict: 关键词精确匹配, 不分词
        :param bool related: 仅搜索与我相关 [筛选条件]
        :param int creator_id: 仅搜索指定作者 ID [筛选条件]
        :param str creator: 仅搜索指定作者 login [筛选条件]
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'type', 'scope', 'page', 'offset', 'strict', 'related', 'creator_id', 'creator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_api_v2_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params or
                params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `search_api_v2_search`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `search_api_v2_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501
        if 'related' in params:
            query_params.append(('related', params['related']))  # noqa: E501
        if 'creator_id' in params:
            query_params.append(('creatorId', params['creator_id']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
