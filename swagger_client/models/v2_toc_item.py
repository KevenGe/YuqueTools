# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2TocItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'type': 'str',
        'title': 'str',
        'url': 'str',
        'slug': 'str',
        'id': 'int',
        'doc_id': 'int',
        'level': 'int',
        'depth': 'int',
        'open_window': 'int',
        'visible': 'int',
        'prev_uuid': 'str',
        'sibling_uuid': 'str',
        'child_uuid': 'str',
        'parent_uuid': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'type': 'type',
        'title': 'title',
        'url': 'url',
        'slug': 'slug',
        'id': 'id',
        'doc_id': 'doc_id',
        'level': 'level',
        'depth': 'depth',
        'open_window': 'open_window',
        'visible': 'visible',
        'prev_uuid': 'prev_uuid',
        'sibling_uuid': 'sibling_uuid',
        'child_uuid': 'child_uuid',
        'parent_uuid': 'parent_uuid'
    }

    def __init__(self, uuid=None, type=None, title=None, url=None, slug=None, id=None, doc_id=None, level=None, depth=None, open_window=None, visible=None, prev_uuid=None, sibling_uuid=None, child_uuid=None, parent_uuid=None):  # noqa: E501
        """V2TocItem - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._type = None
        self._title = None
        self._url = None
        self._slug = None
        self._id = None
        self._doc_id = None
        self._level = None
        self._depth = None
        self._open_window = None
        self._visible = None
        self._prev_uuid = None
        self._sibling_uuid = None
        self._child_uuid = None
        self._parent_uuid = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if type is not None:
            self.type = type
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if slug is not None:
            self.slug = slug
        if id is not None:
            self.id = id
        if doc_id is not None:
            self.doc_id = doc_id
        if level is not None:
            self.level = level
        if depth is not None:
            self.depth = depth
        if open_window is not None:
            self.open_window = open_window
        if visible is not None:
            self.visible = visible
        if prev_uuid is not None:
            self.prev_uuid = prev_uuid
        if sibling_uuid is not None:
            self.sibling_uuid = sibling_uuid
        if child_uuid is not None:
            self.child_uuid = child_uuid
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid

    @property
    def uuid(self):
        """Gets the uuid of this V2TocItem.  # noqa: E501

         节点唯一 ID  # noqa: E501

        :return: The uuid of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this V2TocItem.

         节点唯一 ID  # noqa: E501

        :param uuid: The uuid of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """Gets the type of this V2TocItem.  # noqa: E501

         节点类型 (DOC:文档, LINK:外链, TITLE:分组)  # noqa: E501

        :return: The type of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2TocItem.

         节点类型 (DOC:文档, LINK:外链, TITLE:分组)  # noqa: E501

        :param type: The type of this V2TocItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOC", "LINK", "TITLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def title(self):
        """Gets the title of this V2TocItem.  # noqa: E501

         节点名称  # noqa: E501

        :return: The title of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2TocItem.

         节点名称  # noqa: E501

        :param title: The title of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this V2TocItem.  # noqa: E501

         节点 URL  # noqa: E501

        :return: The url of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V2TocItem.

         节点 URL  # noqa: E501

        :param url: The url of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def slug(self):
        """Gets the slug of this V2TocItem.  # noqa: E501

         节点 URL  # noqa: E501

        :return: The slug of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this V2TocItem.

         节点 URL  # noqa: E501

        :param slug: The slug of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def id(self):
        """Gets the id of this V2TocItem.  # noqa: E501

         文档 ID  # noqa: E501

        :return: The id of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2TocItem.

         文档 ID  # noqa: E501

        :param id: The id of this V2TocItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def doc_id(self):
        """Gets the doc_id of this V2TocItem.  # noqa: E501

         文档 ID  # noqa: E501

        :return: The doc_id of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this V2TocItem.

         文档 ID  # noqa: E501

        :param doc_id: The doc_id of this V2TocItem.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def level(self):
        """Gets the level of this V2TocItem.  # noqa: E501

         节点层级  # noqa: E501

        :return: The level of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this V2TocItem.

         节点层级  # noqa: E501

        :param level: The level of this V2TocItem.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def depth(self):
        """Gets the depth of this V2TocItem.  # noqa: E501

         节点层级  # noqa: E501

        :return: The depth of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this V2TocItem.

         节点层级  # noqa: E501

        :param depth: The depth of this V2TocItem.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def open_window(self):
        """Gets the open_window of this V2TocItem.  # noqa: E501

         是否在新窗口打开 (0:当前页打开, 1:新窗口打开)  # noqa: E501

        :return: The open_window of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._open_window

    @open_window.setter
    def open_window(self, open_window):
        """Sets the open_window of this V2TocItem.

         是否在新窗口打开 (0:当前页打开, 1:新窗口打开)  # noqa: E501

        :param open_window: The open_window of this V2TocItem.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if open_window not in allowed_values:
            raise ValueError(
                "Invalid value for `open_window` ({0}), must be one of {1}"  # noqa: E501
                .format(open_window, allowed_values)
            )

        self._open_window = open_window

    @property
    def visible(self):
        """Gets the visible of this V2TocItem.  # noqa: E501

         是否可见 (0:不可见, 1:可见)  # noqa: E501

        :return: The visible of this V2TocItem.  # noqa: E501
        :rtype: int
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this V2TocItem.

         是否可见 (0:不可见, 1:可见)  # noqa: E501

        :param visible: The visible of this V2TocItem.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if visible not in allowed_values:
            raise ValueError(
                "Invalid value for `visible` ({0}), must be one of {1}"  # noqa: E501
                .format(visible, allowed_values)
            )

        self._visible = visible

    @property
    def prev_uuid(self):
        """Gets the prev_uuid of this V2TocItem.  # noqa: E501

         同级前一个节点 uuid  # noqa: E501

        :return: The prev_uuid of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._prev_uuid

    @prev_uuid.setter
    def prev_uuid(self, prev_uuid):
        """Sets the prev_uuid of this V2TocItem.

         同级前一个节点 uuid  # noqa: E501

        :param prev_uuid: The prev_uuid of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._prev_uuid = prev_uuid

    @property
    def sibling_uuid(self):
        """Gets the sibling_uuid of this V2TocItem.  # noqa: E501

         同级后一个节点 uuid  # noqa: E501

        :return: The sibling_uuid of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._sibling_uuid

    @sibling_uuid.setter
    def sibling_uuid(self, sibling_uuid):
        """Sets the sibling_uuid of this V2TocItem.

         同级后一个节点 uuid  # noqa: E501

        :param sibling_uuid: The sibling_uuid of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._sibling_uuid = sibling_uuid

    @property
    def child_uuid(self):
        """Gets the child_uuid of this V2TocItem.  # noqa: E501

         子级第一个节点 uuid  # noqa: E501

        :return: The child_uuid of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._child_uuid

    @child_uuid.setter
    def child_uuid(self, child_uuid):
        """Sets the child_uuid of this V2TocItem.

         子级第一个节点 uuid  # noqa: E501

        :param child_uuid: The child_uuid of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._child_uuid = child_uuid

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this V2TocItem.  # noqa: E501

         父级节点 uuid  # noqa: E501

        :return: The parent_uuid of this V2TocItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this V2TocItem.

         父级节点 uuid  # noqa: E501

        :param parent_uuid: The parent_uuid of this V2TocItem.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2TocItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2TocItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
