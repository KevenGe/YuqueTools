# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'doc_id': 'int',
        'book_id': 'int',
        'user_id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'doc_id': 'doc_id',
        'book_id': 'book_id',
        'user_id': 'user_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, title=None, doc_id=None, book_id=None, user_id=None, created_at=None, updated_at=None):  # noqa: E501
        """V2Tag - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._doc_id = None
        self._book_id = None
        self._user_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if doc_id is not None:
            self.doc_id = doc_id
        if book_id is not None:
            self.book_id = book_id
        if user_id is not None:
            self.user_id = user_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this V2Tag.  # noqa: E501

         TAG ID  # noqa: E501

        :return: The id of this V2Tag.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2Tag.

         TAG ID  # noqa: E501

        :param id: The id of this V2Tag.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this V2Tag.  # noqa: E501

         TAG NAME  # noqa: E501

        :return: The title of this V2Tag.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this V2Tag.

         TAG NAME  # noqa: E501

        :param title: The title of this V2Tag.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def doc_id(self):
        """Gets the doc_id of this V2Tag.  # noqa: E501

         文档 ID  # noqa: E501

        :return: The doc_id of this V2Tag.  # noqa: E501
        :rtype: int
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this V2Tag.

         文档 ID  # noqa: E501

        :param doc_id: The doc_id of this V2Tag.  # noqa: E501
        :type: int
        """

        self._doc_id = doc_id

    @property
    def book_id(self):
        """Gets the book_id of this V2Tag.  # noqa: E501

         知识库 ID  # noqa: E501

        :return: The book_id of this V2Tag.  # noqa: E501
        :rtype: int
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id):
        """Sets the book_id of this V2Tag.

         知识库 ID  # noqa: E501

        :param book_id: The book_id of this V2Tag.  # noqa: E501
        :type: int
        """

        self._book_id = book_id

    @property
    def user_id(self):
        """Gets the user_id of this V2Tag.  # noqa: E501

         创建者 ID  # noqa: E501

        :return: The user_id of this V2Tag.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2Tag.

         创建者 ID  # noqa: E501

        :param user_id: The user_id of this V2Tag.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this V2Tag.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2Tag.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2Tag.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2Tag.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2Tag.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2Tag.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2Tag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
