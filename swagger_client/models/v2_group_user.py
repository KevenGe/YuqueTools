# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V2GroupUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'group_id': 'int',
        'user_id': 'int',
        'role': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'group': 'V2Group',
        'user': 'V2User'
    }

    attribute_map = {
        'id': 'id',
        'group_id': 'group_id',
        'user_id': 'user_id',
        'role': 'role',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'group': 'group',
        'user': 'user'
    }

    def __init__(self, id=None, group_id=None, user_id=None, role=None, created_at=None, updated_at=None, group=None, user=None):  # noqa: E501
        """V2GroupUser - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._group_id = None
        self._user_id = None
        self._role = None
        self._created_at = None
        self._updated_at = None
        self._group = None
        self._user = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if group_id is not None:
            self.group_id = group_id
        if user_id is not None:
            self.user_id = user_id
        if role is not None:
            self.role = role
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if group is not None:
            self.group = group
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this V2GroupUser.  # noqa: E501

         ID  # noqa: E501

        :return: The id of this V2GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2GroupUser.

         ID  # noqa: E501

        :param id: The id of this V2GroupUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this V2GroupUser.  # noqa: E501

         团队 ID  # noqa: E501

        :return: The group_id of this V2GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V2GroupUser.

         团队 ID  # noqa: E501

        :param group_id: The group_id of this V2GroupUser.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """Gets the user_id of this V2GroupUser.  # noqa: E501

         成员 ID  # noqa: E501

        :return: The user_id of this V2GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V2GroupUser.

         成员 ID  # noqa: E501

        :param user_id: The user_id of this V2GroupUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def role(self):
        """Gets the role of this V2GroupUser.  # noqa: E501

         成员角色 (0:管理员, 1:成员, 2:只读成员)  # noqa: E501

        :return: The role of this V2GroupUser.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this V2GroupUser.

         成员角色 (0:管理员, 1:成员, 2:只读成员)  # noqa: E501

        :param role: The role of this V2GroupUser.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def created_at(self):
        """Gets the created_at of this V2GroupUser.  # noqa: E501

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The created_at of this V2GroupUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V2GroupUser.

         创建时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param created_at: The created_at of this V2GroupUser.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V2GroupUser.  # noqa: E501

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :return: The updated_at of this V2GroupUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V2GroupUser.

         更新时间 格式: YYYY-MM-DDTHH:mm:ss.sssZ (ISO_8601)  # noqa: E501

        :param updated_at: The updated_at of this V2GroupUser.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def group(self):
        """Gets the group of this V2GroupUser.  # noqa: E501


        :return: The group of this V2GroupUser.  # noqa: E501
        :rtype: V2Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this V2GroupUser.


        :param group: The group of this V2GroupUser.  # noqa: E501
        :type: V2Group
        """

        self._group = group

    @property
    def user(self):
        """Gets the user of this V2GroupUser.  # noqa: E501


        :return: The user of this V2GroupUser.  # noqa: E501
        :rtype: V2User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V2GroupUser.


        :param user: The user of this V2GroupUser.  # noqa: E501
        :type: V2User
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2GroupUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2GroupUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
