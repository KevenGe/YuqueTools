# coding: utf-8

"""
    语雀 OpenAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DocApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def doc_api_v2_doc_create(self, group_login, book_slug, **kwargs):  # noqa: E501
        """创建文档  # noqa: E501

        创建文档 POST /api/v2/repos/:book_id/docs POST /api/v2/repos/:group_login/:book_slug/docs   - 注意: 创建文档后不会自动添加到目录，需要调用\"知识库目录更新接口\"更新到目录中    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_create(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_create_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_create_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_create_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """创建文档  # noqa: E501

        创建文档 POST /api/v2/repos/:book_id/docs POST /api/v2/repos/:group_login/:book_slug/docs   - 注意: 创建文档后不会自动添加到目录，需要调用\"知识库目录更新接口\"更新到目录中    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_create_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_doc_create`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_doc_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/docs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_create_by_id(self, book_id, **kwargs):  # noqa: E501
        """创建文档  # noqa: E501

        创建文档 POST /api/v2/repos/:book_id/docs POST /api/v2/repos/:group_login/:book_slug/docs   - 注意: 创建文档后不会自动添加到目录，需要调用\"知识库目录更新接口\"更新到目录中    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_create_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_create_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_create_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_create_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """创建文档  # noqa: E501

        创建文档 POST /api/v2/repos/:book_id/docs POST /api/v2/repos/:group_login/:book_slug/docs   - 注意: 创建文档后不会自动添加到目录，需要调用\"知识库目录更新接口\"更新到目录中    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_create_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_create_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_doc_create_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/docs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_destroy(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """删除文档  # noqa: E501

        删除文档 DELETE /api/v2/repos/:book_id/docs/:id DELETE /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_destroy(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_destroy_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_destroy_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_destroy_with_http_info(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """删除文档  # noqa: E501

        删除文档 DELETE /api/v2/repos/:book_id/docs/:id DELETE /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_destroy_with_http_info(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_doc_destroy`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_doc_destroy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/docs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_destroy_by_id(self, book_id, id, **kwargs):  # noqa: E501
        """删除文档  # noqa: E501

        删除文档 DELETE /api/v2/repos/:book_id/docs/:id DELETE /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_destroy_by_id(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_destroy_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_destroy_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_destroy_by_id_with_http_info(self, book_id, id, **kwargs):  # noqa: E501
        """删除文档  # noqa: E501

        删除文档 DELETE /api/v2/repos/:book_id/docs/:id DELETE /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_destroy_by_id_with_http_info(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_destroy_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_doc_destroy_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_destroy_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/docs/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_list(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取知识库文档列表  # noqa: E501

        获取知识库文档列表 GET /api/v2/repos/:book_id/docs GET /api/v2/repos/:group_login/:book_slug/docs    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_list(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str optional_properties: 获取的额外字段, 多个字段以逗号分隔   - 注意: 每页数量超过 100 本字段会失效   - 支持的字段有:   - hits: 文档阅读数   - tags: 标签   - latest_version_id: 最新已发版本 ID  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_list_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_list_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_list_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取知识库文档列表  # noqa: E501

        获取知识库文档列表 GET /api/v2/repos/:book_id/docs GET /api/v2/repos/:group_login/:book_slug/docs    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_list_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str optional_properties: 获取的额外字段, 多个字段以逗号分隔   - 注意: 每页数量超过 100 本字段会失效   - 支持的字段有:   - hits: 文档阅读数   - tags: 标签   - latest_version_id: 最新已发版本 ID  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'offset', 'limit', 'optional_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_doc_list`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_doc_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'optional_properties' in params:
            query_params.append(('optional_properties', params['optional_properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/docs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_list_by_id(self, book_id, **kwargs):  # noqa: E501
        """获取知识库文档列表  # noqa: E501

        获取知识库文档列表 GET /api/v2/repos/:book_id/docs GET /api/v2/repos/:group_login/:book_slug/docs    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_list_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str optional_properties: 获取的额外字段, 多个字段以逗号分隔   - 注意: 每页数量超过 100 本字段会失效   - 支持的字段有:   - hits: 文档阅读数   - tags: 标签   - latest_version_id: 最新已发版本 ID  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_list_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_list_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_list_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """获取知识库文档列表  # noqa: E501

        获取知识库文档列表 GET /api/v2/repos/:book_id/docs GET /api/v2/repos/:group_login/:book_slug/docs    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_list_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param int offset: 偏移量 [分页参数]
        :param int limit: 每页数量 [分页参数]
        :param str optional_properties: 获取的额外字段, 多个字段以逗号分隔   - 注意: 每页数量超过 100 本字段会失效   - 支持的字段有:   - hits: 文档阅读数   - tags: 标签   - latest_version_id: 最新已发版本 ID  
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'offset', 'limit', 'optional_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_list_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_doc_list_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'optional_properties' in params:
            query_params.append(('optional_properties', params['optional_properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/docs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_show(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """获取文档详情  # noqa: E501

        获取文档详情 GET /api/v2/repos/:book_id/docs/:id GET /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_show(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_show_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_show_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_show_with_http_info(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """获取文档详情  # noqa: E501

        获取文档详情 GET /api/v2/repos/:book_id/docs/:id GET /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_show_with_http_info(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_doc_show`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_doc_show`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/docs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_show_by_id(self, book_id, id, **kwargs):  # noqa: E501
        """获取文档详情  # noqa: E501

        获取文档详情 GET /api/v2/repos/:book_id/docs/:id GET /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_show_by_id(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_show_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_show_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_show_by_id_with_http_info(self, book_id, id, **kwargs):  # noqa: E501
        """获取文档详情  # noqa: E501

        获取文档详情 GET /api/v2/repos/:book_id/docs/:id GET /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_show_by_id_with_http_info(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_show_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_doc_show_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_show_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/docs/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_update(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """更新文档  # noqa: E501

        更新文档 PUT /api/v2/repos/:book_id/docs/:id PUT /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_update(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_update_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_update_with_http_info(group_login, book_slug, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_update_with_http_info(self, group_login, book_slug, id, **kwargs):  # noqa: E501
        """更新文档  # noqa: E501

        更新文档 PUT /api/v2/repos/:book_id/docs/:id PUT /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_update_with_http_info(group_login, book_slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param str id: 文档 ID or 路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_doc_update`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_doc_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/docs/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_update_by_id(self, book_id, id, **kwargs):  # noqa: E501
        """更新文档  # noqa: E501

        更新文档 PUT /api/v2/repos/:book_id/docs/:id PUT /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_update_by_id(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_update_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_update_by_id_with_http_info(book_id, id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_update_by_id_with_http_info(self, book_id, id, **kwargs):  # noqa: E501
        """更新文档  # noqa: E501

        更新文档 PUT /api/v2/repos/:book_id/docs/:id PUT /api/v2/repos/:group_login/:book_slug/docs/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_update_by_id_with_http_info(book_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param str id: 文档 ID or 路径 (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_update_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_doc_update_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_update_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/docs/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_version_list(self, doc_id, **kwargs):  # noqa: E501
        """获取文档历史版本列表  # noqa: E501

        获取文档历史版本列表 GET /api/v2/doc_versions   - 按时间倒序返回最近 100 个已发布版本    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_version_list(doc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: 文档 ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_version_list_with_http_info(doc_id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_version_list_with_http_info(doc_id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_version_list_with_http_info(self, doc_id, **kwargs):  # noqa: E501
        """获取文档历史版本列表  # noqa: E501

        获取文档历史版本列表 GET /api/v2/doc_versions   - 按时间倒序返回最近 100 个已发布版本    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_version_list_with_http_info(doc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int doc_id: 文档 ID (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doc_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_version_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'doc_id' is set
        if ('doc_id' not in params or
                params['doc_id'] is None):
            raise ValueError("Missing the required parameter `doc_id` when calling `doc_api_v2_doc_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'doc_id' in params:
            query_params.append(('doc_id', params['doc_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/doc_versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_doc_version_show(self, id, **kwargs):  # noqa: E501
        """获取文档历史版本详情  # noqa: E501

        获取文档历史版本详情 GET /api/v2/doc_versions/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_version_show(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: 版本 ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_doc_version_show_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_doc_version_show_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_doc_version_show_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取文档历史版本详情  # noqa: E501

        获取文档历史版本详情 GET /api/v2/doc_versions/:id    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_doc_version_show_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: 版本 ID (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_doc_version_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `doc_api_v2_doc_version_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/doc_versions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_repo_toc_show(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取目录  # noqa: E501

        获取目录 GET /api/v2/repos/:book_id/toc GET /api/v2/repos/:group_login/:book_slug/toc    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_show(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_repo_toc_show_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_repo_toc_show_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_repo_toc_show_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """获取目录  # noqa: E501

        获取目录 GET /api/v2/repos/:book_id/toc GET /api/v2/repos/:group_login/:book_slug/toc    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_show_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_repo_toc_show" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_repo_toc_show`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_repo_toc_show`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/toc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_repo_toc_show_by_id(self, book_id, **kwargs):  # noqa: E501
        """获取目录  # noqa: E501

        获取目录 GET /api/v2/repos/:book_id/toc GET /api/v2/repos/:group_login/:book_slug/toc    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_show_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_repo_toc_show_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_repo_toc_show_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_repo_toc_show_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """获取目录  # noqa: E501

        获取目录 GET /api/v2/repos/:book_id/toc GET /api/v2/repos/:group_login/:book_slug/toc    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_show_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_repo_toc_show_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_repo_toc_show_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/toc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_repo_toc_update(self, group_login, book_slug, **kwargs):  # noqa: E501
        """更新目录  # noqa: E501

        更新目录 PUT /api/v2/repos/:book_id/toc PUT /api/v2/repos/:group_login/:book_slug/toc   字段说明:   - 所有场景   - 必填字段     - action     - action_mode   - 选填字段     - target_uuid     - visible - 创建场景   - 必填字段     - 创建文档节点       - type       - doc_ids     - 创建分组节点       - type       - title     - 创建外链节点       - type       - title       - url       - open_window - 移动场景   - 必填字段     - target_uuid     - node_uuid - 编辑场景   - 必填字段     - node_uuid   - 选填字段     - type     - title     - url     - open_window - 删除场景   - 必填字段     - node_uuid    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_update(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_repo_toc_update_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_repo_toc_update_with_http_info(group_login, book_slug, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_repo_toc_update_with_http_info(self, group_login, book_slug, **kwargs):  # noqa: E501
        """更新目录  # noqa: E501

        更新目录 PUT /api/v2/repos/:book_id/toc PUT /api/v2/repos/:group_login/:book_slug/toc   字段说明:   - 所有场景   - 必填字段     - action     - action_mode   - 选填字段     - target_uuid     - visible - 创建场景   - 必填字段     - 创建文档节点       - type       - doc_ids     - 创建分组节点       - type       - title     - 创建外链节点       - type       - title       - url       - open_window - 移动场景   - 必填字段     - target_uuid     - node_uuid - 编辑场景   - 必填字段     - node_uuid   - 选填字段     - type     - title     - url     - open_window - 删除场景   - 必填字段     - node_uuid    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_update_with_http_info(group_login, book_slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_login: 团队 Login (required)
        :param str book_slug: 知识库路径 (required)
        :param object body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_login', 'book_slug', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_repo_toc_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_login' is set
        if ('group_login' not in params or
                params['group_login'] is None):
            raise ValueError("Missing the required parameter `group_login` when calling `doc_api_v2_repo_toc_update`")  # noqa: E501
        # verify the required parameter 'book_slug' is set
        if ('book_slug' not in params or
                params['book_slug'] is None):
            raise ValueError("Missing the required parameter `book_slug` when calling `doc_api_v2_repo_toc_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_login' in params:
            path_params['group_login'] = params['group_login']  # noqa: E501
        if 'book_slug' in params:
            path_params['book_slug'] = params['book_slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{group_login}/{book_slug}/toc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def doc_api_v2_repo_toc_update_by_id(self, book_id, **kwargs):  # noqa: E501
        """更新目录  # noqa: E501

        更新目录 PUT /api/v2/repos/:book_id/toc PUT /api/v2/repos/:group_login/:book_slug/toc   字段说明:   - 所有场景   - 必填字段     - action     - action_mode   - 选填字段     - target_uuid     - visible - 创建场景   - 必填字段     - 创建文档节点       - type       - doc_ids     - 创建分组节点       - type       - title     - 创建外链节点       - type       - title       - url       - open_window - 移动场景   - 必填字段     - target_uuid     - node_uuid - 编辑场景   - 必填字段     - node_uuid   - 选填字段     - type     - title     - url     - open_window - 删除场景   - 必填字段     - node_uuid    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_update_by_id(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.doc_api_v2_repo_toc_update_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
        else:
            (data) = self.doc_api_v2_repo_toc_update_by_id_with_http_info(book_id, **kwargs)  # noqa: E501
            return data

    def doc_api_v2_repo_toc_update_by_id_with_http_info(self, book_id, **kwargs):  # noqa: E501
        """更新目录  # noqa: E501

        更新目录 PUT /api/v2/repos/:book_id/toc PUT /api/v2/repos/:group_login/:book_slug/toc   字段说明:   - 所有场景   - 必填字段     - action     - action_mode   - 选填字段     - target_uuid     - visible - 创建场景   - 必填字段     - 创建文档节点       - type       - doc_ids     - 创建分组节点       - type       - title     - 创建外链节点       - type       - title       - url       - open_window - 移动场景   - 必填字段     - target_uuid     - node_uuid - 编辑场景   - 必填字段     - node_uuid   - 选填字段     - type     - title     - url     - open_window - 删除场景   - 必填字段     - node_uuid    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.doc_api_v2_repo_toc_update_by_id_with_http_info(book_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int book_id: 知识库 ID (required)
        :param object body:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['book_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method doc_api_v2_repo_toc_update_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'book_id' is set
        if ('book_id' not in params or
                params['book_id'] is None):
            raise ValueError("Missing the required parameter `book_id` when calling `doc_api_v2_repo_toc_update_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'book_id' in params:
            path_params['book_id'] = params['book_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['authToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/repos/{book_id}/toc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
